{
  "address": "0xa4EF1da515096DB768Bc47DBC080888795643442",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPairInitCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x970dde3667590cf74f0ff09d9f61464c12530c7d8a70438055500ecca57734a0",
  "receipt": {
    "to": null,
    "from": "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341",
    "contractAddress": "0xa4EF1da515096DB768Bc47DBC080888795643442",
    "transactionIndex": 0,
    "gasUsed": "2935390",
    "logsBloom": "0x
    "blockHash": "0x3d2b94ac823ac3b2aec40fd3bd6d1dd5a3176c5aa8ca11231ba254ea3dd420b9",
    "transactionHash": "0x970dde3667590cf74f0ff09d9f61464c12530c7d8a70438055500ecca57734a0",
    "logs": [],
    "blockNumber": 14043516,
    "cumulativeGasUsed": "2935390",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341"
  ],
  "solcInputHash": "067b054adfd077c1fce1552f5f448c93",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairInitCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswap-v2/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/uniswap-v2/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n\\n    string public constant name = \\\"FATExDAO LP Token\\\";\\n    string public constant symbol = \\\"FATEx-LP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"UniswapV2: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x88ec22d5206dec4235657000c52ee1f424eb4ba3c99bf021431e3ec69f31a8bf\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./UniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function getPairInitCode() external override pure returns (bytes memory) {\\n        return type(UniswapV2Pair).creationCode;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        override\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) =\\n            tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x9e4b70f32abf8133b26d749746e1224963cb634d9e8854c4292a498276a9525a\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract UniswapV2Pair is UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"FATExDAO: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"FATExDAO: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"FATExDAO: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\\n            \\\"FATExDAO: OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                timeElapsed;\\n            price1CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (bool feeOn)\\n    {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20Uniswap(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IUniswapV2Factory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(\\n                    liquidity > 0 && liquidity != uint256(-1),\\n                    \\\"Bad desired liquidity\\\"\\n                );\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(\\n                    MINIMUM_LIQUIDITY\\n                );\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / _reserve0,\\n                amount1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"FATExDAO: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to)\\n        external\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"FATExDAO: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"FATExDAO: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"FATExDAO: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"FATExDAO: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IUniswapV2Callee(to).uniswapV2Call(\\n                    msg.sender,\\n                    amount0Out,\\n                    amount1Out,\\n                    data\\n                );\\n            balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n            balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In =\\n            balance0 > _reserve0 - amount0Out\\n                ? balance0 - (_reserve0 - amount0Out)\\n                : 0;\\n        uint256 amount1In =\\n            balance1 > _reserve1 - amount1Out\\n                ? balance1 - (_reserve1 - amount1Out)\\n                : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"FATExDAO: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"FATExDAO: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20Uniswap(token0).balanceOf(address(this)),\\n            IERC20Uniswap(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf9164a30c5f76cf05ba93ee17d42f6a46798fd9aed538c1bcda9f3ddc9fb0d0c\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x76866491759a6f069ddc030d52df08d4105a8bcef0e3330dee261cf7ee049b1a\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x6bf2e1cd601f8df7a25606a03fb01532f33aa5d77278ef6e7fb72a3b95a2d8d8\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPairInitCode() external pure returns (bytes memory);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x69bcdc4bfd1e452a3232e7ba3ba0ab178d3068360939234089d4b2bd741e312d\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e0a5520297ed1dc711407fb10e309db409fc8143e19a0a7751aa064bb99dfa1\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xbde2cf4655f2f21a4e6cc76c28cf88ade1d8150289c208d48662135be9d5dd97\",\"license\":\"GPL-3.0\"},\"contracts/uniswap-v2/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xc4574ee73aa220d7a8b363ef7c874c099b6007b0f30365993e758c8337a294d8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161345b38038061345b8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556133f8806100636000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80637cd07e4711610081578063c9c653961161005b578063c9c653961461022b578063e6a4390514610266578063f46901ed146102a1576100c9565b80637cd07e4714610173578063a2e74af61461017b578063ba5ad85d146101ae576100c9565b80631e3dd18b116100b25780631e3dd18b1461010757806323cf311814610124578063574f2ba314610159576100c9565b8063017e7e58146100ce578063094b7415146100ff575b600080fd5b6100d66102d4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d66102f0565b6100d66004803603602081101561011d57600080fd5b503561030c565b6101576004803603602081101561013a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610340565b005b61016161040d565b60408051918252519081900360200190f35b6100d6610413565b6101576004803603602081101561019157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661042f565b6101b66104fc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d66004803603604081101561024157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610544565b6100d66004803603604081101561027c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610978565b610157600480360360208110156102b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109ab565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061031957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045490565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606040518060200161050e90610a78565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052905090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061061e578385610621565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166106a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526003602090815260408083208585168452909152902054161561074957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161075b90610a78565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561086957600080fd5b505af115801561087d573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526003602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61293d80610a868339019056fe60806040526001600c5534801561001557600080fd5b5060408051808201825260118152702320aa22bc2220a7902628102a37b5b2b760791b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4c5ebca1245d229441d74d4f3cc072b6b14673c5cd89f427a16448c99f5dd3f1818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561282e8061010f6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461054b578063d505accf14610553578063dd62ed3e146105a4578063fff6cae9146105d2576101b9565b8063ba9a7a5614610515578063bc25cf771461051d578063c45a015514610543576101b9565b80637ecebe00116100d35780637ecebe001461047c57806389afcb44146104a257806395d89b41146104e1578063a9059cbb146104e9576101b9565b80636a6278421461042857806370a082311461044e5780637464fc3d14610474576101b9565b806323b872dd116101665780633644e515116101405780633644e515146103e2578063485cc955146103ea5780635909c0d5146104185780635a3d549314610420576101b9565b806323b872dd1461038657806330adf81f146103bc578063313ce567146103c4576101b9565b8063095ea7b311610197578063095ea7b3146103085780630dfe16811461034857806318160ddd1461036c576101b9565b8063022c0d9f146101be57806306fdde031461024c5780630902f1ac146102c9575b600080fd5b61024a600480360360808110156101d457600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561020b57600080fd5b82018360208201111561021d57600080fd5b8035906020019184600183028401116401000000008311171561023f57600080fd5b5090925090506105da565b005b610254610b80565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028e578181015183820152602001610276565b50505050905090810190601f1680156102bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d1610bb9565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103346004803603604081101561031e57600080fd5b506001600160a01b038135169060200135610c0e565b604080519115158252519081900360200190f35b610350610c25565b604080516001600160a01b039092168252519081900360200190f35b610374610c34565b60408051918252519081900360200190f35b6103346004803603606081101561039c57600080fd5b506001600160a01b03813581169160208101359091169060400135610c3a565b610374610cec565b6103cc610d10565b6040805160ff9092168252519081900360200190f35b610374610d15565b61024a6004803603604081101561040057600080fd5b506001600160a01b0381358116916020013516610d1b565b610374610dc0565b610374610dc6565b6103746004803603602081101561043e57600080fd5b50356001600160a01b0316610dcc565b6103746004803603602081101561046457600080fd5b50356001600160a01b03166112fa565b61037461130c565b6103746004803603602081101561049257600080fd5b50356001600160a01b0316611312565b6104c8600480360360208110156104b857600080fd5b50356001600160a01b0316611324565b6040805192835260208301919091528051918290030190f35b61025461173a565b610334600480360360408110156104ff57600080fd5b506001600160a01b038135169060200135611773565b610374611780565b61024a6004803603602081101561053357600080fd5b50356001600160a01b0316611786565b610350611932565b610350611941565b61024a600480360360e081101561056957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611950565b610374600480360360408110156105ba57600080fd5b506001600160a01b0381358116916020013516611bb4565b61024a611bd1565b600c54600114610631576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55841515806106445750600084115b61067f5760405162461bcd60e51b81526004018080602001828103825260248152602001806127646024913960400191505060405180910390fd5b60008061068a610bb9565b5091509150816dffffffffffffffffffffffffffff16871080156106bd5750806dffffffffffffffffffffffffffff1686105b61070e576040805162461bcd60e51b815260206004820181905260248201527f464154457844414f3a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061074c5750806001600160a01b0316896001600160a01b031614155b61079d576040805162461bcd60e51b815260206004820152601460248201527f464154457844414f3a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b8a156107ae576107ae828a8d611d83565b89156107bf576107bf818a8c611d83565b861561087157886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050505b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d60208110156108fa57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d602081101561098957600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a900383116109b35760006109c9565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff160383116109ed576000610a03565b89856dffffffffffffffffffffffffffff160383035b90506000821180610a145750600081115b610a4f5760405162461bcd60e51b81526004018080602001828103825260238152602001806127886023913960400191505060405180910390fd5b6000610a71610a5f846003611f69565b610a6b876103e8611f69565b90611fd5565b90506000610a83610a5f846003611f69565b9050610aaf620f4240610aa96dffffffffffffffffffffffffffff8b8116908b16611f69565b90611f69565b610ab98383611f69565b1015610b0c576040805162461bcd60e51b815260206004820152600b60248201527f464154457844414f3a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610b1a8484888861202d565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280601181526020017f464154457844414f204c5020546f6b656e00000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610c1b3384846122c9565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610cd7576001600160a01b0384166000908152600260209081526040808320338452909152902054610cb29083611fd5565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610ce284848461232b565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610d7a576040805162461bcd60e51b815260206004820152601360248201527f464154457844414f3a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610e25576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580610e35610bb9565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d6020811015610ecc57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b505190506000610f82836dffffffffffffffffffffffffffff8716611fd5565b90506000610fa0836dffffffffffffffffffffffffffff8716611fd5565b90506000610fae87876123d9565b600054909150806111cb57600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d602081101561104157600080fd5b50519050336001600160a01b038216141561114257806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561108f57600080fd5b505afa1580156110a3573d6000803e3d6000fd5b505050506040513d60208110156110b957600080fd5b5051995089158015906110ec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61113d576040805162461bcd60e51b815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b6111c5565b6001600160a01b0381161561119e576040805162461bcd60e51b815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b6111b66103e8610a6b6111b18888611f69565b612520565b99506111c560006103e8612572565b5061121c565b6112196dffffffffffffffffffffffffffff89166111e98684611f69565b816111f057fe5b046dffffffffffffffffffffffffffff891661120c8685611f69565b8161121357fe5b046125fc565b98505b6000891161125b5760405162461bcd60e51b81526004018080602001828103825260278152602001806127d26027913960400191505060405180910390fd5b6112658a8a612572565b61127186868a8a61202d565b81156112ad576008546112a9906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611f69565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461137e576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c8190558061138e610bb9565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d602081101561142d57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561149457600080fd5b505afa1580156114a8573d6000803e3d6000fd5b505050506040513d60208110156114be57600080fd5b5051306000908152600160205260408120549192506114dd88886123d9565b600054909150806114ee8487611f69565b816114f557fe5b049a50806115038486611f69565b8161150a57fe5b04995060008b11801561151d575060008a115b6115585760405162461bcd60e51b81526004018080602001828103825260278152602001806127ab6027913960400191505060405180910390fd5b6115623084612614565b61156d878d8d611d83565b611578868d8c611d83565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156115d757600080fd5b505afa1580156115eb573d6000803e3d6000fd5b505050506040513d602081101561160157600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561166657600080fd5b505afa15801561167a573d6000803e3d6000fd5b505050506040513d602081101561169057600080fd5b505193506116a085858b8b61202d565b81156116dc576008546116d8906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611f69565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f46415445782d4c5000000000000000000000000000000000000000000000000081525081565b6000610c1b33848461232b565b6103e881565b600c546001146117dd576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0394851694909316926118a692859287926118a1926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561186f57600080fd5b505afa158015611883573d6000803e3d6000fd5b505050506040513d602081101561189957600080fd5b505190611fd5565b611d83565b61192881846118a16008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561186f57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156119a5576040805162461bcd60e51b815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611af9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590611b4d5750886001600160a01b0316816001600160a01b0316145b611b9e576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611ba98989896122c9565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611c28576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611d7c926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d6020811015611cbc57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d2257600080fd5b505afa158015611d36573d6000803e3d6000fd5b505050506040513d6020811015611d4c57600080fd5b50516008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661202d565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310611e7c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611e3f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ede576040519150601f19603f3d011682016040523d82523d6000602084013e611ee3565b606091505b5091509150818015611f11575080511580611f115750808060200190516020811015611f0e57600080fd5b50515b611f62576040805162461bcd60e51b815260206004820152601960248201527f464154457844414f3a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b6000811580611f8457505080820282828281611f8157fe5b04145b610c1f576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610c1f576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff841180159061205957506dffffffffffffffffffffffffffff8311155b6120aa576040805162461bcd60e51b815260206004820152601260248201527f464154457844414f3a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906120fa57506dffffffffffffffffffffffffffff841615155b801561211557506dffffffffffffffffffffffffffff831615155b156121bf578063ffffffff166121528561212e866126a6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16906126ca565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff81166121928461212e876126a6565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461234e9082611fd5565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461237d908261270b565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561242a57600080fd5b505afa15801561243e573d6000803e3d6000fd5b505050506040513d602081101561245457600080fd5b5051600b546001600160a01b03821615801594509192509061250c5780156125075760006124986111b16dffffffffffffffffffffffffffff888116908816611f69565b905060006124a583612520565b9050808211156125045760006124c76124be8484611fd5565b60005490611f69565b905060006124e0836124da866005611f69565b9061270b565b905060008183816124ed57fe5b0490508015612500576125008782612572565b5050505b50505b612518565b8015612518576000600b555b505092915050565b60006003821115612563575080600160028204015b8181101561255d5780915060028182858161254c57fe5b04018161255557fe5b049050612535565b5061256d565b811561256d575060015b919050565b60005461257f908261270b565b60009081556001600160a01b0383168152600160205260409020546125a4908261270b565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061260b578161260d565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546126379082611fd5565b6001600160a01b0383166000908152600160205260408120919091555461265e9082611fd5565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161270357fe5b049392505050565b80820182811015610c1f576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe464154457844414f3a20494e53554646494349454e545f4f55545055545f414d4f554e54464154457844414f3a20494e53554646494349454e545f494e5055545f414d4f554e54464154457844414f3a20494e53554646494349454e545f4c49515549444954595f4255524e4544464154457844414f3a20494e53554646494349454e545f4c49515549444954595f4d494e544544a264697066735822122084c62a55e76c35c6d0748f346cb0cb45237480c1273f21155cd5d52111ea0f3c64736f6c634300060c0033a2646970667358221220cc6e16fa0b70fec3623e7b8c13804042ac9aec8fc7a8895d76bac21d0e679aae64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80637cd07e4711610081578063c9c653961161005b578063c9c653961461022b578063e6a4390514610266578063f46901ed146102a1576100c9565b80637cd07e4714610173578063a2e74af61461017b578063ba5ad85d146101ae576100c9565b80631e3dd18b116100b25780631e3dd18b1461010757806323cf311814610124578063574f2ba314610159576100c9565b8063017e7e58146100ce578063094b7415146100ff575b600080fd5b6100d66102d4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d66102f0565b6100d66004803603602081101561011d57600080fd5b503561030c565b6101576004803603602081101561013a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610340565b005b61016161040d565b60408051918252519081900360200190f35b6100d6610413565b6101576004803603602081101561019157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661042f565b6101b66104fc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d66004803603604081101561024157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610544565b6100d66004803603604081101561027c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610978565b610157600480360360208110156102b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109ab565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061031957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045490565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606040518060200161050e90610a78565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052905090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061061e578385610621565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166106a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526003602090815260408083208585168452909152902054161561074957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161075b90610a78565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561086957600080fd5b505af115801561087d573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526003602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61293d80610a868339019056fe60806040526001600c5534801561001557600080fd5b5060408051808201825260118152702320aa22bc2220a7902628102a37b5b2b760791b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4c5ebca1245d229441d74d4f3cc072b6b14673c5cd89f427a16448c99f5dd3f1818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561282e8061010f6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a71461054b578063d505accf14610553578063dd62ed3e146105a4578063fff6cae9146105d2576101b9565b8063ba9a7a5614610515578063bc25cf771461051d578063c45a015514610543576101b9565b80637ecebe00116100d35780637ecebe001461047c57806389afcb44146104a257806395d89b41146104e1578063a9059cbb146104e9576101b9565b80636a6278421461042857806370a082311461044e5780637464fc3d14610474576101b9565b806323b872dd116101665780633644e515116101405780633644e515146103e2578063485cc955146103ea5780635909c0d5146104185780635a3d549314610420576101b9565b806323b872dd1461038657806330adf81f146103bc578063313ce567146103c4576101b9565b8063095ea7b311610197578063095ea7b3146103085780630dfe16811461034857806318160ddd1461036c576101b9565b8063022c0d9f146101be57806306fdde031461024c5780630902f1ac146102c9575b600080fd5b61024a600480360360808110156101d457600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561020b57600080fd5b82018360208201111561021d57600080fd5b8035906020019184600183028401116401000000008311171561023f57600080fd5b5090925090506105da565b005b610254610b80565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028e578181015183820152602001610276565b50505050905090810190601f1680156102bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d1610bb9565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103346004803603604081101561031e57600080fd5b506001600160a01b038135169060200135610c0e565b604080519115158252519081900360200190f35b610350610c25565b604080516001600160a01b039092168252519081900360200190f35b610374610c34565b60408051918252519081900360200190f35b6103346004803603606081101561039c57600080fd5b506001600160a01b03813581169160208101359091169060400135610c3a565b610374610cec565b6103cc610d10565b6040805160ff9092168252519081900360200190f35b610374610d15565b61024a6004803603604081101561040057600080fd5b506001600160a01b0381358116916020013516610d1b565b610374610dc0565b610374610dc6565b6103746004803603602081101561043e57600080fd5b50356001600160a01b0316610dcc565b6103746004803603602081101561046457600080fd5b50356001600160a01b03166112fa565b61037461130c565b6103746004803603602081101561049257600080fd5b50356001600160a01b0316611312565b6104c8600480360360208110156104b857600080fd5b50356001600160a01b0316611324565b6040805192835260208301919091528051918290030190f35b61025461173a565b610334600480360360408110156104ff57600080fd5b506001600160a01b038135169060200135611773565b610374611780565b61024a6004803603602081101561053357600080fd5b50356001600160a01b0316611786565b610350611932565b610350611941565b61024a600480360360e081101561056957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611950565b610374600480360360408110156105ba57600080fd5b506001600160a01b0381358116916020013516611bb4565b61024a611bd1565b600c54600114610631576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55841515806106445750600084115b61067f5760405162461bcd60e51b81526004018080602001828103825260248152602001806127646024913960400191505060405180910390fd5b60008061068a610bb9565b5091509150816dffffffffffffffffffffffffffff16871080156106bd5750806dffffffffffffffffffffffffffff1686105b61070e576040805162461bcd60e51b815260206004820181905260248201527f464154457844414f3a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061074c5750806001600160a01b0316896001600160a01b031614155b61079d576040805162461bcd60e51b815260206004820152601460248201527f464154457844414f3a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b8a156107ae576107ae828a8d611d83565b89156107bf576107bf818a8c611d83565b861561087157886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050505b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d60208110156108fa57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d602081101561098957600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a900383116109b35760006109c9565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff160383116109ed576000610a03565b89856dffffffffffffffffffffffffffff160383035b90506000821180610a145750600081115b610a4f5760405162461bcd60e51b81526004018080602001828103825260238152602001806127886023913960400191505060405180910390fd5b6000610a71610a5f846003611f69565b610a6b876103e8611f69565b90611fd5565b90506000610a83610a5f846003611f69565b9050610aaf620f4240610aa96dffffffffffffffffffffffffffff8b8116908b16611f69565b90611f69565b610ab98383611f69565b1015610b0c576040805162461bcd60e51b815260206004820152600b60248201527f464154457844414f3a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610b1a8484888861202d565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280601181526020017f464154457844414f204c5020546f6b656e00000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610c1b3384846122c9565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610cd7576001600160a01b0384166000908152600260209081526040808320338452909152902054610cb29083611fd5565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610ce284848461232b565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610d7a576040805162461bcd60e51b815260206004820152601360248201527f464154457844414f3a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610e25576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580610e35610bb9565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d6020811015610ecc57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b505190506000610f82836dffffffffffffffffffffffffffff8716611fd5565b90506000610fa0836dffffffffffffffffffffffffffff8716611fd5565b90506000610fae87876123d9565b600054909150806111cb57600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d602081101561104157600080fd5b50519050336001600160a01b038216141561114257806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561108f57600080fd5b505afa1580156110a3573d6000803e3d6000fd5b505050506040513d60208110156110b957600080fd5b5051995089158015906110ec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61113d576040805162461bcd60e51b815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b6111c5565b6001600160a01b0381161561119e576040805162461bcd60e51b815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b6111b66103e8610a6b6111b18888611f69565b612520565b99506111c560006103e8612572565b5061121c565b6112196dffffffffffffffffffffffffffff89166111e98684611f69565b816111f057fe5b046dffffffffffffffffffffffffffff891661120c8685611f69565b8161121357fe5b046125fc565b98505b6000891161125b5760405162461bcd60e51b81526004018080602001828103825260278152602001806127d26027913960400191505060405180910390fd5b6112658a8a612572565b61127186868a8a61202d565b81156112ad576008546112a9906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611f69565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461137e576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c8190558061138e610bb9565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d602081101561142d57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561149457600080fd5b505afa1580156114a8573d6000803e3d6000fd5b505050506040513d60208110156114be57600080fd5b5051306000908152600160205260408120549192506114dd88886123d9565b600054909150806114ee8487611f69565b816114f557fe5b049a50806115038486611f69565b8161150a57fe5b04995060008b11801561151d575060008a115b6115585760405162461bcd60e51b81526004018080602001828103825260278152602001806127ab6027913960400191505060405180910390fd5b6115623084612614565b61156d878d8d611d83565b611578868d8c611d83565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156115d757600080fd5b505afa1580156115eb573d6000803e3d6000fd5b505050506040513d602081101561160157600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561166657600080fd5b505afa15801561167a573d6000803e3d6000fd5b505050506040513d602081101561169057600080fd5b505193506116a085858b8b61202d565b81156116dc576008546116d8906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611f69565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f46415445782d4c5000000000000000000000000000000000000000000000000081525081565b6000610c1b33848461232b565b6103e881565b600c546001146117dd576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0394851694909316926118a692859287926118a1926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561186f57600080fd5b505afa158015611883573d6000803e3d6000fd5b505050506040513d602081101561189957600080fd5b505190611fd5565b611d83565b61192881846118a16008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561186f57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156119a5576040805162461bcd60e51b815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611af9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590611b4d5750886001600160a01b0316816001600160a01b0316145b611b9e576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611ba98989896122c9565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611c28576040805162461bcd60e51b815260206004820152601060248201527f464154457844414f3a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611d7c926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d6020811015611cbc57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d2257600080fd5b505afa158015611d36573d6000803e3d6000fd5b505050506040513d6020811015611d4c57600080fd5b50516008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661202d565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310611e7c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611e3f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ede576040519150601f19603f3d011682016040523d82523d6000602084013e611ee3565b606091505b5091509150818015611f11575080511580611f115750808060200190516020811015611f0e57600080fd5b50515b611f62576040805162461bcd60e51b815260206004820152601960248201527f464154457844414f3a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b6000811580611f8457505080820282828281611f8157fe5b04145b610c1f576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610c1f576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff841180159061205957506dffffffffffffffffffffffffffff8311155b6120aa576040805162461bcd60e51b815260206004820152601260248201527f464154457844414f3a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906120fa57506dffffffffffffffffffffffffffff841615155b801561211557506dffffffffffffffffffffffffffff831615155b156121bf578063ffffffff166121528561212e866126a6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16906126ca565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff81166121928461212e876126a6565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461234e9082611fd5565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461237d908261270b565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561242a57600080fd5b505afa15801561243e573d6000803e3d6000fd5b505050506040513d602081101561245457600080fd5b5051600b546001600160a01b03821615801594509192509061250c5780156125075760006124986111b16dffffffffffffffffffffffffffff888116908816611f69565b905060006124a583612520565b9050808211156125045760006124c76124be8484611fd5565b60005490611f69565b905060006124e0836124da866005611f69565b9061270b565b905060008183816124ed57fe5b0490508015612500576125008782612572565b5050505b50505b612518565b8015612518576000600b555b505092915050565b60006003821115612563575080600160028204015b8181101561255d5780915060028182858161254c57fe5b04018161255557fe5b049050612535565b5061256d565b811561256d575060015b919050565b60005461257f908261270b565b60009081556001600160a01b0383168152600160205260409020546125a4908261270b565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061260b578161260d565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546126379082611fd5565b6001600160a01b0383166000908152600160205260408120919091555461265e9082611fd5565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161270357fe5b049392505050565b80820182811015610c1f576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe464154457844414f3a20494e53554646494349454e545f4f55545055545f414d4f554e54464154457844414f3a20494e53554646494349454e545f494e5055545f414d4f554e54464154457844414f3a20494e53554646494349454e545f4c49515549444954595f4255524e4544464154457844414f3a20494e53554646494349454e545f4c49515549444954595f4d494e544544a264697066735822122084c62a55e76c35c6d0748f346cb0cb45237480c1273f21155cd5d52111ea0f3c64736f6c634300060c0033a2646970667358221220cc6e16fa0b70fec3623e7b8c13804042ac9aec8fc7a8895d76bac21d0e679aae64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12626,
        "contract": "contracts/uniswap-v2/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12629,
        "contract": "contracts/uniswap-v2/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12632,
        "contract": "contracts/uniswap-v2/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12639,
        "contract": "contracts/uniswap-v2/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 12643,
        "contract": "contracts/uniswap-v2/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}