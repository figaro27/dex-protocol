{
  "address": "0x6f4078cb47438157c914409d10358a0Cf4b06AB7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FateToken",
          "name": "_fate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fate",
      "outputs": [
        {
          "internalType": "contract FateToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "leave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ec0e7ca1d375409b87ac13df5aaa145a25b26ac8dc31b8d3e535e62d6f33c4e",
  "receipt": {
    "to": null,
    "from": "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341",
    "contractAddress": "0x6f4078cb47438157c914409d10358a0Cf4b06AB7",
    "transactionIndex": 2,
    "gasUsed": "2518080",
    "logsBloom": "0x
    "blockHash": "0x7edde045c6f562a4c16f4a4924f150ed35620dcfd40efee79b65ce8558a85710",
    "transactionHash": "0x0ec0e7ca1d375409b87ac13df5aaa145a25b26ac8dc31b8d3e535e62d6f33c4e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 16437568,
        "transactionHash": "0x0ec0e7ca1d375409b87ac13df5aaa145a25b26ac8dc31b8d3e535e62d6f33c4e",
        "address": "0x6f4078cb47438157c914409d10358a0Cf4b06AB7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d45d5d7caf24b4de1eab6431e160891daab28341"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 19,
        "blockHash": "0x7edde045c6f562a4c16f4a4924f150ed35620dcfd40efee79b65ce8558a85710"
      }
    ],
    "blockNumber": 16437568,
    "cumulativeGasUsed": "2897736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB2e2650DFdb7b2DEc4a4455a375ffBfD926cE5FC"
  ],
  "solcInputHash": "067b054adfd077c1fce1552f5f448c93",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FateToken\",\"name\":\"_fate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fate\",\"outputs\":[{\"internalType\":\"contract FateToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event that's emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the permit struct used by the contract\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fatex/XFateToken.sol\":\"XFateToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/fatex/FateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract FateToken {\\n\\n    /// @notice EIP-20 token name for this token\\n    string public name;\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol;\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply;\\n\\n    /// @dev Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @dev Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event that's emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event that's emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Uni token\\n     * @param account_ The initial account to grant all the tokens\\n     * @param totalSupply_ The initial and permanent total supply of the tokens\\n     */\\n    constructor(\\n        address account_,\\n        uint totalSupply_\\n    ) public {\\n        totalSupply = safe96(totalSupply_, \\\"FateToken::constructor: invalid total supply\\\");\\n        balances[account_] = uint96(totalSupply);\\n        emit Transfer(address(0), account_, totalSupply);\\n\\n        name = \\\"FATExDAO\\\";\\n        symbol = \\\"FATE\\\";\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"FateToken::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"FateToken::permit: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"FateToken::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"FateToken::permit: unauthorized\\\");\\n        require(now <= deadline, \\\"FateToken::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"FateToken::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"FateToken::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"FateToken::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"FateToken::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"FateToken::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"FateToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"FateToken::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"FateToken::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"FateToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"FateToken::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"FateToken::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"FateToken::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"FateToken::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"FateToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xd81012a15285070b197187aef0ba2eccce8e5e4123253c4e4ebb9c8aff1f8d99\",\"license\":\"MIT\"},\"contracts/fatex/XFateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./FateToken.sol\\\";\\n\\n// This contract handles swapping to and from xFATE, FATE's staking token.\\ncontract XFateToken is FateToken {\\n    using SafeMath for uint256;\\n\\n    FateToken public fate;\\n\\n    // Define the FATE token contract\\n    constructor(FateToken _fate) FateToken(msg.sender, 0) public {\\n        fate = _fate;\\n\\n        name = \\\"xFATExDAO\\\";\\n        symbol = \\\"xFATE\\\";\\n    }\\n\\n    // Locks FATE and mints xFATE\\n    function enter(uint256 _amount) public {\\n\\n        // Gets the amount of FATE locked in the contract\\n        uint256 totalFate = fate.balanceOf(address(this));\\n        // Gets the amount of xFATE in existence\\n        uint256 totalShares = totalSupply;\\n\\n        if (delegates[msg.sender] == address(0)) {\\n            // initialize delegation\\n            delegates[msg.sender] = fate.delegates(msg.sender) == address(0) ? msg.sender : fate.delegates(msg.sender);\\n        }\\n\\n        if (totalShares == 0 || totalFate == 0) {\\n            // If no xFATE exists, mint it 1:1 to the amount put in\\n            _mint(msg.sender, safe96(_amount, \\\"XFateToken::enter: invalid amount\\\"));\\n        } else {\\n            // Calculate and mint the amount of xFATE the FATE is worth. The ratio will change overtime, as xFATE is\\n            // burned/minted and FATE deposited + gained from fees / withdrawn.\\n            uint96 what = safe96(_amount.mul(totalShares).div(totalFate), \\\"XFateToken::enter: invalid amount\\\");\\n            _mint(msg.sender, what);\\n        }\\n\\n        // Lock the FATE in the contract\\n        fate.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Unlocks the staked + gained FATE and burns xFATE\\n    function leave(uint256 _share) public {\\n        // Gets the amount of xFATE in existence\\n        uint256 totalShares = totalSupply;\\n\\n        _burn(msg.sender, safe96(_share, \\\"XFateToken::leave: invalid share amount\\\"));\\n\\n        // Calculates the amount of FATE the xFATE is worth\\n        uint256 what = _share.mul(fate.balanceOf(address(this))).div(totalShares);\\n        fate.transfer(msg.sender, what);\\n    }\\n\\n    function _mint(address account, uint96 amount) internal virtual {\\n        require(account != address(0), \\\"XFateToken::_mint: zero address\\\");\\n\\n        balances[account] = add96(balances[account], amount, \\\"XFateToken::_mint: balances overflow\\\");\\n\\n        uint96 _totalSupply = safe96(totalSupply, \\\"XFateToken::_mint: invalid total supply\\\");\\n        totalSupply = add96(_totalSupply, amount, \\\"XFateToken::_mint: total supply overflow\\\");\\n\\n        emit Transfer(address(0), account, amount);\\n\\n        _moveDelegates(address(0), delegates[account], amount);\\n    }\\n\\n    function _burn(address account, uint96 amount) internal virtual {\\n        require(account != address(0), \\\"XFateToken: burn from the zero address\\\");\\n\\n        balances[account] = sub96(balances[account], amount, \\\"XFateToken::_burn: amount exceeds balance\\\");\\n\\n        uint96 _totalSupply = safe96(totalSupply, \\\"XFateToken::_burn: invalid total supply\\\");\\n        totalSupply = sub96(_totalSupply, amount, \\\"XFateToken::_burn: amount exceeds total supply\\\");\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _moveDelegates(delegates[account], address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8984edeb958f6c7a97d8c04d107282704a27f203498f1d48d2a69b36fff8ce04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e4f38038062002e4f833981810160405260208110156200003757600080fd5b50516040805160608101909152602c80825233916000916200006491839162002e236020830139620001b9565b6001600160601b031660028181556001600160a01b038416600081815260046020908152604080832080546001600160601b031916909617909555925484519081529351919390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a360408051808201909152600880825267464154457844414f60c01b6020909201918252620001069160009162000260565b50604080518082019091526004808252634641544560e01b6020909201918252620001349160019162000260565b5050600980546001600160a01b0319166001600160a01b038416178155604080518082019091528181526878464154457844414f60b81b602090910190815262000182925060009162000260565b5060408051808201909152600580825264784641544560d81b6020909201918252620001b19160019162000260565b5050620002fc565b6000816c010000000000000000000000008410620002585760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200021c57818101518382015260200162000202565b50505050905090810190601f1680156200024a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a357805160ff1916838001178555620002d3565b82800160010185558215620002d3579182015b82811115620002d3578251825591602001919060010190620002b6565b50620002e1929150620002e5565b5090565b5b80821115620002e15760008155600101620002e6565b612b17806200030c6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e3578063b4b5ea571161008c578063dd62ed3e11610066578063dd62ed3e1461054e578063e7a324dc1461057c578063f1127ed81461058457610198565b8063b4b5ea5714610490578063c3cda520146104b6578063d505accf146104fd57610198565b806395d89b41116100bd57806395d89b411461043f578063a59f3e0c14610447578063a9059cbb1461046457610198565b806370a08231146103a6578063782d6fe1146103cc5780637ecebe001461041957610198565b806330adf81f116101455780635c19a95c1161011f5780635c19a95c1461032257806367dfd4c91461034a5780636fcfff451461036757610198565b806330adf81f146102d6578063313ce567146102de578063587cde1e146102fc57610198565b80631c703655116101765780631c7036551461027457806320606b701461029857806323b872dd146102a057610198565b806306fdde031461019d578063095ea7b31461021a57806318160ddd1461025a575b600080fd5b6101a56105e3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101df5781810151838201526020016101c7565b50505050905090810190601f16801561020c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102466004803603604081101561023057600080fd5b506001600160a01b038135169060200135610671565b604080519115158252519081900360200190f35b61026261074c565b60408051918252519081900360200190f35b61027c610752565b604080516001600160a01b039092168252519081900360200190f35b610262610761565b610246600480360360608110156102b657600080fd5b506001600160a01b03813581169160208101359091169060400135610785565b6102626108f1565b6102e6610915565b6040805160ff9092168252519081900360200190f35b61027c6004803603602081101561031257600080fd5b50356001600160a01b031661091a565b6103486004803603602081101561033857600080fd5b50356001600160a01b0316610935565b005b6103486004803603602081101561036057600080fd5b5035610942565b61038d6004803603602081101561037d57600080fd5b50356001600160a01b0316610abc565b6040805163ffffffff9092168252519081900360200190f35b610262600480360360208110156103bc57600080fd5b50356001600160a01b0316610ad4565b6103f8600480360360408110156103e257600080fd5b506001600160a01b038135169060200135610afd565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b6102626004803603602081101561042f57600080fd5b50356001600160a01b0316610d3c565b6101a5610d4e565b6103486004803603602081101561045d57600080fd5b5035610da8565b6102466004803603604081101561047a57600080fd5b506001600160a01b0381351690602001356110c9565b6103f8600480360360208110156104a657600080fd5b50356001600160a01b0316611105565b610348600480360360c08110156104cc57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561117c565b610348600480360360e081101561051357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356114a1565b6102626004803603604081101561056457600080fd5b506001600160a01b03813581169160200135166118f8565b610262611931565b6105b66004803603604081101561059a57600080fd5b5080356001600160a01b0316906020013563ffffffff16611955565b6040805163ffffffff90931683526bffffffffffffffffffffffff90911660208301528051918290030190f35b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b505050505081565b60008060001983141561068757506000196106ac565b6106a9836040518060600160405280602a8152602001612682602a9139611990565b90505b3360008181526003602090815260408083206001600160a01b0389168085529083529281902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff8716908117909155815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a360019150505b92915050565b60025481565b6009546001600160a01b031681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602a80845291936bffffffffffffffffffffffff9091169285926107e2928892919061268290830139611990565b9050866001600160a01b0316836001600160a01b03161415801561081457506bffffffffffffffffffffffff82811614155b156108d957600061083e838360405180608001604052806042815260200161281160429139611a33565b6001600160a01b038981166000818152600360209081526040808320948a168084529482529182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff871690811790915582519081529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b6108e4878783611aaa565b5060019695505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6005602052600090815260409020546001600160a01b031681565b61093f3382611cce565b50565b600060025490506109743361096f846040518060600160405280602781526020016127a860279139611990565b611d75565b600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092610a1b928592610a15926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d6020811015610a0c57600080fd5b50518690611f23565b90611f7c565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b158015610a8b57600080fd5b505af1158015610a9f573d6000803e3d6000fd5b505050506040513d6020811015610ab557600080fd5b5050505050565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546bffffffffffffffffffffffff1690565b6000438210610b3d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612929602c913960400191505060405180910390fd5b6001600160a01b03831660009081526007602052604090205463ffffffff1680610b6b576000915050610746565b6001600160a01b038416600090815260066020908152604080832063ffffffff600019860181168552925290912054168310610bed576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff168352929052205464010000000090046bffffffffffffffffffffffff169050610746565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610c28576000915050610746565b600060001982015b8163ffffffff168163ffffffff161115610cf157600282820363ffffffff16048103610c5a612617565b506001600160a01b038716600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046bffffffffffffffffffffffff169181019190915290871415610ccc576020015194506107469350505050565b805163ffffffff16871115610ce357819350610cea565b6001820392505b5050610c30565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546bffffffffffffffffffffffff6401000000009091041691505092915050565b60086020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d6020811015610e3657600080fd5b505160025433600090815260056020526040902054919250906001600160a01b0316610fd757600954604080517f587cde1e00000000000000000000000000000000000000000000000000000000815233600482015290516000926001600160a01b03169163587cde1e916024808301926020929190829003018186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d6020811015610eea57600080fd5b50516001600160a01b031614610f8f57600954604080517f587cde1e00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163587cde1e91602480820192602092909190829003018186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d6020811015610f8857600080fd5b5051610f91565b335b33600090815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555b801580610fe2575081155b15611017576110123361100d856040518060600160405280602181526020016127f060219139611990565b611fe3565b611056565b600061104861102a84610a158786611f23565b6040518060600160405280602181526020016127f060219139611990565b90506110543382611fe3565b505b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610a8b57600080fd5b6000806110ee836040518060600160405280602b815260200161262f602b9139611990565b90506110fb338583611aaa565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680611130576000611175565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866600060405180828054600181600116156101000203166002900480156111fc5780601f106111da5761010080835404028352918201916111fc565b820191906000526020600020905b8154815290600101906020018083116111e8575b505091505060405180910390206112116121a6565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a905282518085039091018152610140840183528051908501207f19010000000000000000000000000000000000000000000000000000000000006101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a905261022286018990529351929650909492939092600192610242808401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa15801561137d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166113ed5760405162461bcd60e51b815260040180806020018281038252602b81526020018061277d602b913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460018101909155891461144b5760405162461bcd60e51b8152600401808060200182810382526027815260200180612a8f6027913960400191505060405180910390fd5b8742111561148a5760405162461bcd60e51b815260040180806020018281038252602b815260200180612877602b913960400191505060405180910390fd5b611494818b611cce565b505050505b505050505050565b60006000198614156114b657506000196114db565b6114d886604051806060016040528060298152602001612a2560299139611990565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051808280546001816001161561010002031660029004801561155b5780601f1061153957610100808354040283529182019161155b565b820191906000526020600020905b815481529060010190602001808311611547575b505091505060405180910390206115706121a6565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401206001600160a01b038d8116600081815260088752848120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960c089015260e0880193909352928f1661010087015261012086018e90526101408601919091526101608086018d905284518087039091018152610180860185528051908701207f19010000000000000000000000000000000000000000000000000000000000006101a08701526101a286018490526101c2808701829052855180880390910181526101e2870180875281519189019190912090839052610202870180875281905260ff8d1661022288015261024287018c905261026287018b905294519397509593949093919261028280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015611705573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166117755760405162461bcd60e51b81526004018080602001828103825260248152602001806128a26024913960400191505060405180910390fd5b8b6001600160a01b0316816001600160a01b0316146117db576040805162461bcd60e51b815260206004820152601f60248201527f46617465546f6b656e3a3a7065726d69743a20756e617574686f72697a656400604482015290519081900360640190fd5b8842111561181a5760405162461bcd60e51b81526004018080602001828103825260248152602001806128536024913960400191505060405180910390fd5b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405180826bffffffffffffffffffffffff16815260200191505060405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546bffffffffffffffffffffffff1690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046bffffffffffffffffffffffff1682565b6000816c010000000000000000000000008410611a2b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119f05781810151838201526020016119d8565b50505050905090810190601f168015611a1d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff1611158290611aa25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b505050900390565b6001600160a01b038316611aef5760405162461bcd60e51b8152600401808060200182810382526041815260200180612a4e6041913960600191505060405180910390fd5b6001600160a01b038216611b345760405162461bcd60e51b815260040180806020018281038252603f8152602001806128c6603f913960400191505060405180910390fd5b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603b808452611b84936bffffffffffffffffffffffff909216928592919061295590830139611a33565b6001600160a01b03848116600090815260046020908152604080832080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff968716179055928616825290829020548251606081019093526035808452611c0994919091169285929091906129c9908301396121aa565b6001600160a01b0383811660008181526004602090815260409182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9687161790558151948616855290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36001600160a01b03808416600090815260056020526040808220548584168352912054611cc992918216911683612219565b505050565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946bffffffffffffffffffffffff9092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611d6f828483612219565b50505050565b6001600160a01b038216611dba5760405162461bcd60e51b81526004018080602001828103825260268152602001806126ac6026913960400191505060405180910390fd5b6001600160a01b038216600090815260046020908152604091829020548251606081019093526029808452611e0a936bffffffffffffffffffffffff909216928592919061272790830139611a33565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000611e836002546040518060600160405280602781526020016126d260279139611990565b9050611ea881836040518060600160405280602e81526020016126f9602e9139611a33565b6bffffffffffffffffffffffff908116600255604080519184168252516000916001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a36001600160a01b03808416600090815260056020526040812054611cc992169084612219565b600082611f3257506000610746565b82820282848281611f3f57fe5b04146111755760405162461bcd60e51b81526004018080602001828103825260218152602001806127cf6021913960400191505060405180910390fd5b6000808211611fd2576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611fdb57fe5b049392505050565b6001600160a01b03821661203e576040805162461bcd60e51b815260206004820152601f60248201527f5846617465546f6b656e3a3a5f6d696e743a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b03821660009081526004602090815260409182902054825160608101909352602480845261208e936bffffffffffffffffffffffff9092169285929190612905908301396121aa565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060006121076002546040518060600160405280602781526020016129fe60279139611990565b905061212c818360405180606001604052806028815260200161265a602891396121aa565b6bffffffffffffffffffffffff908116600255604080519184168252516001600160a01b038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a36001600160a01b03808416600090815260056020526040812054611cc9921684612219565b4690565b6000838301826bffffffffffffffffffffffff80871690831610156122105760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561224957506000816bffffffffffffffffffffffff16115b15611cc9576001600160a01b03831615612307576001600160a01b03831660009081526007602052604081205463ffffffff1690816122895760006122ce565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006122f582856040518060600160405280602d8152602001612750602d9139611a33565b9050612303868484846123b8565b5050505b6001600160a01b03821615611cc9576001600160a01b03821660009081526007602052604081205463ffffffff169081612342576000612387565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006123ae82856040518060600160405280602c8152602001612ab6602c91396121aa565b9050611499858484845b60006123dc43604051806060016040528060398152602001612990603991396125c1565b905060008463ffffffff1611801561242557506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b15612499576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080547fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff166401000000006bffffffffffffffffffffffff851602179055612568565b60408051808201825263ffffffff80841682526bffffffffffffffffffffffff80861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9587167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b604080516bffffffffffffffffffffffff80861682528416602082015281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b6000816401000000008410611a2b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b60408051808201909152600080825260208201529056fe46617465546f6b656e3a3a7472616e736665723a20616d6f756e74206578636565647320393620626974735846617465546f6b656e3a3a5f6d696e743a20746f74616c20737570706c79206f766572666c6f7746617465546f6b656e3a3a617070726f76653a20616d6f756e74206578636565647320393620626974735846617465546f6b656e3a206275726e2066726f6d20746865207a65726f20616464726573735846617465546f6b656e3a3a5f6275726e3a20696e76616c696420746f74616c20737570706c795846617465546f6b656e3a3a5f6275726e3a20616d6f756e74206578636565647320746f74616c20737570706c795846617465546f6b656e3a3a5f6275726e3a20616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6964207369676e61747572655846617465546f6b656e3a3a6c656176653a20696e76616c696420736861726520616d6f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775846617465546f6b656e3a3a656e7465723a20696e76616c696420616d6f756e7446617465546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546617465546f6b656e3a3a7065726d69743a207369676e6174757265206578706972656446617465546f6b656e3a3a64656c656761746542795369673a207369676e6174757265206578706972656446617465546f6b656e3a3a7065726d69743a20696e76616c6964207369676e617475726546617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573735846617465546f6b656e3a3a5f6d696e743a2062616c616e636573206f766572666c6f7746617465546f6b656e3a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e656446617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f77735846617465546f6b656e3a3a5f6d696e743a20696e76616c696420746f74616c20737570706c7946617465546f6b656e3a3a7065726d69743a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e736665722066726f6d20746865207a65726f206164647265737346617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6964206e6f6e636546617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220bd2a2274c74cd83b88352886a1729e3b25ddf58d8b3369cfc8b314a37a35283564736f6c634300060c003346617465546f6b656e3a3a636f6e7374727563746f723a20696e76616c696420746f74616c20737570706c79",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e3578063b4b5ea571161008c578063dd62ed3e11610066578063dd62ed3e1461054e578063e7a324dc1461057c578063f1127ed81461058457610198565b8063b4b5ea5714610490578063c3cda520146104b6578063d505accf146104fd57610198565b806395d89b41116100bd57806395d89b411461043f578063a59f3e0c14610447578063a9059cbb1461046457610198565b806370a08231146103a6578063782d6fe1146103cc5780637ecebe001461041957610198565b806330adf81f116101455780635c19a95c1161011f5780635c19a95c1461032257806367dfd4c91461034a5780636fcfff451461036757610198565b806330adf81f146102d6578063313ce567146102de578063587cde1e146102fc57610198565b80631c703655116101765780631c7036551461027457806320606b701461029857806323b872dd146102a057610198565b806306fdde031461019d578063095ea7b31461021a57806318160ddd1461025a575b600080fd5b6101a56105e3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101df5781810151838201526020016101c7565b50505050905090810190601f16801561020c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102466004803603604081101561023057600080fd5b506001600160a01b038135169060200135610671565b604080519115158252519081900360200190f35b61026261074c565b60408051918252519081900360200190f35b61027c610752565b604080516001600160a01b039092168252519081900360200190f35b610262610761565b610246600480360360608110156102b657600080fd5b506001600160a01b03813581169160208101359091169060400135610785565b6102626108f1565b6102e6610915565b6040805160ff9092168252519081900360200190f35b61027c6004803603602081101561031257600080fd5b50356001600160a01b031661091a565b6103486004803603602081101561033857600080fd5b50356001600160a01b0316610935565b005b6103486004803603602081101561036057600080fd5b5035610942565b61038d6004803603602081101561037d57600080fd5b50356001600160a01b0316610abc565b6040805163ffffffff9092168252519081900360200190f35b610262600480360360208110156103bc57600080fd5b50356001600160a01b0316610ad4565b6103f8600480360360408110156103e257600080fd5b506001600160a01b038135169060200135610afd565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b6102626004803603602081101561042f57600080fd5b50356001600160a01b0316610d3c565b6101a5610d4e565b6103486004803603602081101561045d57600080fd5b5035610da8565b6102466004803603604081101561047a57600080fd5b506001600160a01b0381351690602001356110c9565b6103f8600480360360208110156104a657600080fd5b50356001600160a01b0316611105565b610348600480360360c08110156104cc57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561117c565b610348600480360360e081101561051357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356114a1565b6102626004803603604081101561056457600080fd5b506001600160a01b03813581169160200135166118f8565b610262611931565b6105b66004803603604081101561059a57600080fd5b5080356001600160a01b0316906020013563ffffffff16611955565b6040805163ffffffff90931683526bffffffffffffffffffffffff90911660208301528051918290030190f35b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b505050505081565b60008060001983141561068757506000196106ac565b6106a9836040518060600160405280602a8152602001612682602a9139611990565b90505b3360008181526003602090815260408083206001600160a01b0389168085529083529281902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff8716908117909155815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a360019150505b92915050565b60025481565b6009546001600160a01b031681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602a80845291936bffffffffffffffffffffffff9091169285926107e2928892919061268290830139611990565b9050866001600160a01b0316836001600160a01b03161415801561081457506bffffffffffffffffffffffff82811614155b156108d957600061083e838360405180608001604052806042815260200161281160429139611a33565b6001600160a01b038981166000818152600360209081526040808320948a168084529482529182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff871690811790915582519081529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b6108e4878783611aaa565b5060019695505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6005602052600090815260409020546001600160a01b031681565b61093f3382611cce565b50565b600060025490506109743361096f846040518060600160405280602781526020016127a860279139611990565b611d75565b600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092610a1b928592610a15926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d6020811015610a0c57600080fd5b50518690611f23565b90611f7c565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b158015610a8b57600080fd5b505af1158015610a9f573d6000803e3d6000fd5b505050506040513d6020811015610ab557600080fd5b5050505050565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546bffffffffffffffffffffffff1690565b6000438210610b3d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612929602c913960400191505060405180910390fd5b6001600160a01b03831660009081526007602052604090205463ffffffff1680610b6b576000915050610746565b6001600160a01b038416600090815260066020908152604080832063ffffffff600019860181168552925290912054168310610bed576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff168352929052205464010000000090046bffffffffffffffffffffffff169050610746565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610c28576000915050610746565b600060001982015b8163ffffffff168163ffffffff161115610cf157600282820363ffffffff16048103610c5a612617565b506001600160a01b038716600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046bffffffffffffffffffffffff169181019190915290871415610ccc576020015194506107469350505050565b805163ffffffff16871115610ce357819350610cea565b6001820392505b5050610c30565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546bffffffffffffffffffffffff6401000000009091041691505092915050565b60086020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d6020811015610e3657600080fd5b505160025433600090815260056020526040902054919250906001600160a01b0316610fd757600954604080517f587cde1e00000000000000000000000000000000000000000000000000000000815233600482015290516000926001600160a01b03169163587cde1e916024808301926020929190829003018186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d6020811015610eea57600080fd5b50516001600160a01b031614610f8f57600954604080517f587cde1e00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163587cde1e91602480820192602092909190829003018186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d6020811015610f8857600080fd5b5051610f91565b335b33600090815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555b801580610fe2575081155b15611017576110123361100d856040518060600160405280602181526020016127f060219139611990565b611fe3565b611056565b600061104861102a84610a158786611f23565b6040518060600160405280602181526020016127f060219139611990565b90506110543382611fe3565b505b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610a8b57600080fd5b6000806110ee836040518060600160405280602b815260200161262f602b9139611990565b90506110fb338583611aaa565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680611130576000611175565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866600060405180828054600181600116156101000203166002900480156111fc5780601f106111da5761010080835404028352918201916111fc565b820191906000526020600020905b8154815290600101906020018083116111e8575b505091505060405180910390206112116121a6565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a905282518085039091018152610140840183528051908501207f19010000000000000000000000000000000000000000000000000000000000006101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a905261022286018990529351929650909492939092600192610242808401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa15801561137d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166113ed5760405162461bcd60e51b815260040180806020018281038252602b81526020018061277d602b913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460018101909155891461144b5760405162461bcd60e51b8152600401808060200182810382526027815260200180612a8f6027913960400191505060405180910390fd5b8742111561148a5760405162461bcd60e51b815260040180806020018281038252602b815260200180612877602b913960400191505060405180910390fd5b611494818b611cce565b505050505b505050505050565b60006000198614156114b657506000196114db565b6114d886604051806060016040528060298152602001612a2560299139611990565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051808280546001816001161561010002031660029004801561155b5780601f1061153957610100808354040283529182019161155b565b820191906000526020600020905b815481529060010190602001808311611547575b505091505060405180910390206115706121a6565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401206001600160a01b038d8116600081815260088752848120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960c089015260e0880193909352928f1661010087015261012086018e90526101408601919091526101608086018d905284518087039091018152610180860185528051908701207f19010000000000000000000000000000000000000000000000000000000000006101a08701526101a286018490526101c2808701829052855180880390910181526101e2870180875281519189019190912090839052610202870180875281905260ff8d1661022288015261024287018c905261026287018b905294519397509593949093919261028280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015611705573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166117755760405162461bcd60e51b81526004018080602001828103825260248152602001806128a26024913960400191505060405180910390fd5b8b6001600160a01b0316816001600160a01b0316146117db576040805162461bcd60e51b815260206004820152601f60248201527f46617465546f6b656e3a3a7065726d69743a20756e617574686f72697a656400604482015290519081900360640190fd5b8842111561181a5760405162461bcd60e51b81526004018080602001828103825260248152602001806128536024913960400191505060405180910390fd5b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405180826bffffffffffffffffffffffff16815260200191505060405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546bffffffffffffffffffffffff1690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046bffffffffffffffffffffffff1682565b6000816c010000000000000000000000008410611a2b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119f05781810151838201526020016119d8565b50505050905090810190601f168015611a1d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff1611158290611aa25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b505050900390565b6001600160a01b038316611aef5760405162461bcd60e51b8152600401808060200182810382526041815260200180612a4e6041913960600191505060405180910390fd5b6001600160a01b038216611b345760405162461bcd60e51b815260040180806020018281038252603f8152602001806128c6603f913960400191505060405180910390fd5b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603b808452611b84936bffffffffffffffffffffffff909216928592919061295590830139611a33565b6001600160a01b03848116600090815260046020908152604080832080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff968716179055928616825290829020548251606081019093526035808452611c0994919091169285929091906129c9908301396121aa565b6001600160a01b0383811660008181526004602090815260409182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9687161790558151948616855290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36001600160a01b03808416600090815260056020526040808220548584168352912054611cc992918216911683612219565b505050565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946bffffffffffffffffffffffff9092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611d6f828483612219565b50505050565b6001600160a01b038216611dba5760405162461bcd60e51b81526004018080602001828103825260268152602001806126ac6026913960400191505060405180910390fd5b6001600160a01b038216600090815260046020908152604091829020548251606081019093526029808452611e0a936bffffffffffffffffffffffff909216928592919061272790830139611a33565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000611e836002546040518060600160405280602781526020016126d260279139611990565b9050611ea881836040518060600160405280602e81526020016126f9602e9139611a33565b6bffffffffffffffffffffffff908116600255604080519184168252516000916001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a36001600160a01b03808416600090815260056020526040812054611cc992169084612219565b600082611f3257506000610746565b82820282848281611f3f57fe5b04146111755760405162461bcd60e51b81526004018080602001828103825260218152602001806127cf6021913960400191505060405180910390fd5b6000808211611fd2576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611fdb57fe5b049392505050565b6001600160a01b03821661203e576040805162461bcd60e51b815260206004820152601f60248201527f5846617465546f6b656e3a3a5f6d696e743a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b03821660009081526004602090815260409182902054825160608101909352602480845261208e936bffffffffffffffffffffffff9092169285929190612905908301396121aa565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060006121076002546040518060600160405280602781526020016129fe60279139611990565b905061212c818360405180606001604052806028815260200161265a602891396121aa565b6bffffffffffffffffffffffff908116600255604080519184168252516001600160a01b038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a36001600160a01b03808416600090815260056020526040812054611cc9921684612219565b4690565b6000838301826bffffffffffffffffffffffff80871690831610156122105760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561224957506000816bffffffffffffffffffffffff16115b15611cc9576001600160a01b03831615612307576001600160a01b03831660009081526007602052604081205463ffffffff1690816122895760006122ce565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006122f582856040518060600160405280602d8152602001612750602d9139611a33565b9050612303868484846123b8565b5050505b6001600160a01b03821615611cc9576001600160a01b03821660009081526007602052604081205463ffffffff169081612342576000612387565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006123ae82856040518060600160405280602c8152602001612ab6602c91396121aa565b9050611499858484845b60006123dc43604051806060016040528060398152602001612990603991396125c1565b905060008463ffffffff1611801561242557506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b15612499576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080547fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff166401000000006bffffffffffffffffffffffff851602179055612568565b60408051808201825263ffffffff80841682526bffffffffffffffffffffffff80861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9587167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b604080516bffffffffffffffffffffffff80861682528416602082015281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b6000816401000000008410611a2b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156119f05781810151838201526020016119d8565b60408051808201909152600080825260208201529056fe46617465546f6b656e3a3a7472616e736665723a20616d6f756e74206578636565647320393620626974735846617465546f6b656e3a3a5f6d696e743a20746f74616c20737570706c79206f766572666c6f7746617465546f6b656e3a3a617070726f76653a20616d6f756e74206578636565647320393620626974735846617465546f6b656e3a206275726e2066726f6d20746865207a65726f20616464726573735846617465546f6b656e3a3a5f6275726e3a20696e76616c696420746f74616c20737570706c795846617465546f6b656e3a3a5f6275726e3a20616d6f756e74206578636565647320746f74616c20737570706c795846617465546f6b656e3a3a5f6275726e3a20616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6964207369676e61747572655846617465546f6b656e3a3a6c656176653a20696e76616c696420736861726520616d6f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775846617465546f6b656e3a3a656e7465723a20696e76616c696420616d6f756e7446617465546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546617465546f6b656e3a3a7065726d69743a207369676e6174757265206578706972656446617465546f6b656e3a3a64656c656761746542795369673a207369676e6174757265206578706972656446617465546f6b656e3a3a7065726d69743a20696e76616c6964207369676e617475726546617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573735846617465546f6b656e3a3a5f6d696e743a2062616c616e636573206f766572666c6f7746617465546f6b656e3a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e656446617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f77735846617465546f6b656e3a3a5f6d696e743a20696e76616c696420746f74616c20737570706c7946617465546f6b656e3a3a7065726d69743a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e736665722066726f6d20746865207a65726f206164647265737346617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6964206e6f6e636546617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220bd2a2274c74cd83b88352886a1729e3b25ddf58d8b3369cfc8b314a37a35283564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event that's emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the permit struct used by the contract"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6351,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6361,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6368,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 6373,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 6378,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "delegates",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6390,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6383_storage))"
      },
      {
        "astId": 6395,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 6418,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9660,
        "contract": "contracts/fatex/XFateToken.sol:XFateToken",
        "label": "fate",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(FateToken)7506"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(FateToken)7506": {
        "encoding": "inplace",
        "label": "contract FateToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6383_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct FateToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)6383_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)6383_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FateToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)6383_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)6383_storage": {
        "encoding": "inplace",
        "label": "struct FateToken.Checkpoint",
        "members": [
          {
            "astId": 6380,
            "contract": "contracts/fatex/XFateToken.sol:XFateToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6382,
            "contract": "contracts/fatex/XFateToken.sol:XFateToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}