{
  "address": "0xFD266a3D4DA9d185A0491f71cE61C5a22014d874",
  "addresses": [
    "0xFe2976Fc317667743d72D232DCEdd4E250170f1B",
    "0x45caFF15EEBe2D5Bd5569fa3878953d29376bb34",
    "0xcd9C194E47862CEDfC47bd6EDe9ba92EAb3d8B44",
    "0x5828930EF8e1Dc22360785c330aBe62BDa4B67E6",
    "0x7578D3a22E77f9CFBd8dbfB827c26C93DbCaBcF6",
    "0xe5bA0b2f098cB2f2efA986bF605Bd6DBc8acD7D6",
    "0x0beC09f73EBa239B9bDB0e9f6363373bB30686F1",
    "0xFD266a3D4DA9d185A0491f71cE61C5a22014d874"
  ],
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliffDurationInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_revocable",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficary",
          "type": "address"
        }
      ],
      "name": "BeneficiarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "releasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revocable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c1a05acd96e0a4effd36768e3da84a2f521fb2ee43be1a1c775d584d4cf92f0",
  "receipt": {
    "to": null,
    "from": "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341",
    "contractAddress": "0xFD266a3D4DA9d185A0491f71cE61C5a22014d874",
    "transactionIndex": 0,
    "gasUsed": "1233072",
    "logsBloom": "0x
    "blockHash": "0x161e2ed1558326303c89cfa6fd55a41fbcbb30bb9fd88138b3e798a04d8b1c5f",
    "transactionHash": "0x8c1a05acd96e0a4effd36768e3da84a2f521fb2ee43be1a1c775d584d4cf92f0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16437608,
        "transactionHash": "0x8c1a05acd96e0a4effd36768e3da84a2f521fb2ee43be1a1c775d584d4cf92f0",
        "address": "0xFD266a3D4DA9d185A0491f71cE61C5a22014d874",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d45d5d7caf24b4de1eab6431e160891daab28341"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x161e2ed1558326303c89cfa6fd55a41fbcbb30bb9fd88138b3e798a04d8b1c5f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16437608,
        "transactionHash": "0x8c1a05acd96e0a4effd36768e3da84a2f521fb2ee43be1a1c775d584d4cf92f0",
        "address": "0xFD266a3D4DA9d185A0491f71cE61C5a22014d874",
        "topics": [
          "0x04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24"
        ],
        "data": "0x0000000000000000000000004853365bc81f8270d902076892e13f27c27e7266",
        "logIndex": 1,
        "blockHash": "0x161e2ed1558326303c89cfa6fd55a41fbcbb30bb9fd88138b3e798a04d8b1c5f"
      }
    ],
    "blockNumber": 16437608,
    "cumulativeGasUsed": "1233072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4853365bc81f8270d902076892e13f27c27e7266",
    1630007129,
    "0",
    "0",
    true
  ],
  "solcInputHash": "067b054adfd077c1fce1552f5f448c93",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDurationInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"}],\"name\":\"BeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revocable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a vesting contract that vests its balance of any ERC20 token to the _beneficiary, gradually in a linear fashion until _start + _duration. By then all of the balance will have vested.\",\"params\":{\"_beneficiary\":\"address of the beneficiary to whom vested tokens are transferred\",\"_cliffDurationInSeconds\":\"duration in seconds of the cliff in which tokens will begin to vest\",\"_durationInSeconds\":\"duration in seconds of the period in which the tokens will vest\",\"_revocable\":\"whether the vesting is revocable or not\",\"_startTimestamp\":\"the time (as Unix time) at which point vesting starts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releasableAmount(address)\":{\"details\":\"Calculates the amount that has already vested but hasn't been released yet.\",\"params\":{\"_token\":\"ERC20 token which is being vested\"}},\"release(address)\":{\"params\":{\"_token\":\"ERC20 token which is being vested\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(address)\":{\"params\":{\"_token\":\"ERC20 token which is being vested\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vestedAmount(address)\":{\"details\":\"Calculates the amount that has already vested.\",\"params\":{\"_token\":\"ERC20 token which is being vested\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"release(address)\":{\"notice\":\"Transfers vested tokens to beneficiary.\"},\"revoke(address)\":{\"notice\":\"Allows the owner to revoke the vesting. Tokens already vested remain in the contract, the rest are returned to the owner.\"}},\"notice\":\"This was copied from OpenZeppelin's TokenLockup contract to work for solidity version 5.0.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fatex/TokenLockup.sol\":\"TokenLockup\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/fatex/TokenLockup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * This was copied from OpenZeppelin's TokenLockup contract to work for solidity version 5.0.\\n */\\ncontract TokenLockup is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event BeneficiarySet(address beneficary);\\n    event Released(uint256 amount);\\n    event Revoked();\\n\\n    // beneficiary of tokens after they are released\\n    address public beneficiary;\\n\\n    uint256 public cliff;\\n    uint256 public start;\\n    uint256 public duration;\\n\\n    bool public revocable;\\n\\n    mapping(address => uint256) public released;\\n    mapping(address => bool) public revoked;\\n\\n    /**\\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\n     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\\n     * of the balance will have vested.\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _startTimestamp the time (as Unix time) at which point vesting starts\\n     * @param _cliffDurationInSeconds duration in seconds of the cliff in which tokens will begin to vest\\n     * @param _durationInSeconds duration in seconds of the period in which the tokens will vest\\n     * @param _revocable whether the vesting is revocable or not\\n     */\\n    constructor(\\n        address _beneficiary,\\n        uint256 _startTimestamp,\\n        uint256 _cliffDurationInSeconds,\\n        uint256 _durationInSeconds,\\n        bool _revocable\\n    )\\n    public\\n    {\\n        require(_beneficiary != address(0));\\n        require(_cliffDurationInSeconds <= _durationInSeconds);\\n\\n        beneficiary = _beneficiary;\\n        revocable = _revocable;\\n        duration = _durationInSeconds;\\n        cliff = _startTimestamp.add(_cliffDurationInSeconds);\\n        start = _startTimestamp;\\n\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    function setBeneficiary(address _beneficiary) public {\\n        require(\\n            msg.sender == beneficiary,\\n            \\\"TokenLockup:: UNAUTHORIZED\\\"\\n        );\\n        require(\\n            _beneficiary != address(0),\\n            \\\"TokenLockup:: INVALID_BENEFICIARY\\\"\\n        );\\n\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     * @param _token ERC20 token which is being vested\\n     */\\n    function release(IERC20 _token) public {\\n        require(\\n            msg.sender == owner() || msg.sender == beneficiary,\\n            \\\"TokenLockup: UNAUTHORIZED\\\"\\n        );\\n\\n        uint256 unreleased = releasableAmount(_token);\\n\\n        require(\\n            unreleased > 0,\\n            \\\"TokenLockup: NOTHING_TO_RELEASE\\\"\\n        );\\n\\n        released[address(_token)] = released[address(_token)].add(unreleased);\\n\\n        _token.safeTransfer(beneficiary, unreleased);\\n\\n        emit Released(unreleased);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\\n     * remain in the contract, the rest are returned to the owner.\\n     * @param _token ERC20 token which is being vested\\n     */\\n    function revoke(IERC20 _token) public onlyOwner {\\n        require(\\n            revocable,\\n            \\\"TokenLockup: NOT_REVOCABLE\\\"\\n        );\\n        require(\\n            !revoked[address(_token)],\\n            \\\"TokenLockup: NOT_REVOCABLE\\\"\\n        );\\n\\n        uint256 balance = _token.balanceOf(address(this));\\n\\n        uint256 unreleased = releasableAmount(_token);\\n        uint256 refund = balance.sub(unreleased);\\n\\n        revoked[address(_token)] = true;\\n\\n        _token.safeTransfer(owner(), refund);\\n\\n        emit Revoked();\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\\n     * @param _token ERC20 token which is being vested\\n     */\\n    function releasableAmount(IERC20 _token) public view returns (uint256) {\\n        return vestedAmount(_token).sub(released[address(_token)]);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested.\\n     * @param _token ERC20 token which is being vested\\n     */\\n    function vestedAmount(IERC20 _token) public view returns (uint256) {\\n        uint256 currentBalance = _token.balanceOf(address(this));\\n        uint256 totalBalance = currentBalance.add(released[address(_token)]);\\n\\n        if (block.timestamp < cliff) {\\n            return 0;\\n        } else if (block.timestamp >= start.add(duration) || revoked[address(_token)]) {\\n            return totalBalance;\\n        } else {\\n            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa4c2753608408afeb0a6851e4ceb30976a38083cb3851a599fff301363e652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611517380380611517833981810160405260a081101561003357600080fd5b50805160208201516040830151606084015160809094015192939192909190600061005c610157565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0385166100b957600080fd5b818311156100c657600080fd5b600180546001600160a01b0319166001600160a01b0387161790556005805460ff19168215151790556004829055610109848461015b602090811b610d4017901c565b6002556003849055604080516001600160a01b038716815290517f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a249181900360200190a150505050506101bc565b3390565b6000828201838110156101b5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b61134c806101cb6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639852595c116100665780639852595c1461027a578063be9a6555146102ad578063f2fde38b146102b5578063fa01dc06146102e8576100f5565b8063715018a61461021b57806374a8f10314610223578063872a7810146102565780638da5cb5b14610272576100f5565b806319165587116100d3578063191655871461014f5780631c31f71014610184578063384711cc146101b757806338af3eed146101ea576100f5565b80630fb5a6b4146100fa57806313d033c0146101145780631726cbc81461011c575b600080fd5b61010261031b565b60408051918252519081900360200190f35b610102610321565b6101026004803603602081101561013257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610327565b6101826004803603602081101561016557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610368565b005b6101826004803603602081101561019a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610513565b610102600480360360208110156101cd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661064a565b6101f26107b0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101826107cc565b6101826004803603602081101561023957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108c9565b61025e610b81565b604080519115158252519081900360200190f35b6101f2610b8a565b6101026004803603602081101561029057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba6565b610102610bb8565b610182600480360360208110156102cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610bbe565b61025e600480360360208110156102fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d2b565b60045481565b60025481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120546103609061035a8461064a565b90610da3565b90505b919050565b610370610b8a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103c0575060015473ffffffffffffffffffffffffffffffffffffffff1633145b610411576040805162461bcd60e51b815260206004820152601960248201527f546f6b656e4c6f636b75703a20554e415554484f52495a454400000000000000604482015290519081900360640190fd5b600061041c82610327565b905060008111610473576040805162461bcd60e51b815260206004820152601f60248201527f546f6b656e4c6f636b75703a204e4f5448494e475f544f5f52454c4541534500604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020546104a39082610d40565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600660205260409020929092556001546104dc92911683610e00565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461057f576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a3a20554e415554484f52495a4544000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166105d15760405162461bcd60e51b81526004018080602001828103825260218152602001806112cc6021913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a249181900360200190a150565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d60208110156106de57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081205491925090610715908390610d40565b905060025442101561072c57600092505050610363565b60045460035461073b91610d40565b4210158061076e575073ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205460ff165b1561077c5791506103639050565b6107a76004546107a161079a60035442610da390919063ffffffff16565b8490610e92565b90610eeb565b92505050610363565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6107d4610f52565b73ffffffffffffffffffffffffffffffffffffffff166107f2610b8a565b73ffffffffffffffffffffffffffffffffffffffff161461085a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6108d1610f52565b73ffffffffffffffffffffffffffffffffffffffff166108ef610b8a565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460ff166109ae576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a204e4f545f5245564f4341424c45000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604090205460ff1615610a29576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a204e4f545f5245564f4341424c45000000000000604482015290519081900360640190fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d6020811015610abc57600080fd5b505190506000610acb83610327565b90506000610ad98383610da3565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559050610b52610b34610b8a565b73ffffffffffffffffffffffffffffffffffffffff86169083610e00565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60066020526000908152604090205481565b60035481565b610bc6610f52565b73ffffffffffffffffffffffffffffffffffffffff16610be4610b8a565b73ffffffffffffffffffffffffffffffffffffffff1614610c4c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610c9e5760405162461bcd60e51b815260040180806020018281038252602681526020018061125f6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60076020526000908152604090205460ff1681565b600082820183811015610d9a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082821115610dfa576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e8d908490610f56565b505050565b600082610ea157506000610d9d565b82820282848281610eae57fe5b0414610d9a5760405162461bcd60e51b81526004018080602001828103825260218152602001806112ab6021913960400191505060405180910390fd5b6000808211610f41576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610f4a57fe5b049392505050565b3390565b6060610fb8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110149092919063ffffffff16565b805190915015610e8d57808060200190516020811015610fd757600080fd5b5051610e8d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806112ed602a913960400191505060405180910390fd5b6060611023848460008561102d565b90505b9392505050565b60608247101561106e5760405162461bcd60e51b81526004018080602001828103825260268152602001806112856026913960400191505060405180910390fd5b611077856111b4565b6110c8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061113257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016110f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611194576040519150601f19603f3d011682016040523d82523d6000602084013e611199565b606091505b50915091506111a98282866111ba565b979650505050505050565b3b151590565b606083156111c9575081611026565b8251156111d95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122357818101518382015260200161120b565b50505050905090810190601f1680156112505780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e4c6f636b75703a3a20494e56414c49445f42454e45464943494152595361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207ac9270eddae13a77ce83c4456dfcaea370e06432c3d7cd903890c016570c4c064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639852595c116100665780639852595c1461027a578063be9a6555146102ad578063f2fde38b146102b5578063fa01dc06146102e8576100f5565b8063715018a61461021b57806374a8f10314610223578063872a7810146102565780638da5cb5b14610272576100f5565b806319165587116100d3578063191655871461014f5780631c31f71014610184578063384711cc146101b757806338af3eed146101ea576100f5565b80630fb5a6b4146100fa57806313d033c0146101145780631726cbc81461011c575b600080fd5b61010261031b565b60408051918252519081900360200190f35b610102610321565b6101026004803603602081101561013257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610327565b6101826004803603602081101561016557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610368565b005b6101826004803603602081101561019a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610513565b610102600480360360208110156101cd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661064a565b6101f26107b0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101826107cc565b6101826004803603602081101561023957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108c9565b61025e610b81565b604080519115158252519081900360200190f35b6101f2610b8a565b6101026004803603602081101561029057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba6565b610102610bb8565b610182600480360360208110156102cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610bbe565b61025e600480360360208110156102fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d2b565b60045481565b60025481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120546103609061035a8461064a565b90610da3565b90505b919050565b610370610b8a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103c0575060015473ffffffffffffffffffffffffffffffffffffffff1633145b610411576040805162461bcd60e51b815260206004820152601960248201527f546f6b656e4c6f636b75703a20554e415554484f52495a454400000000000000604482015290519081900360640190fd5b600061041c82610327565b905060008111610473576040805162461bcd60e51b815260206004820152601f60248201527f546f6b656e4c6f636b75703a204e4f5448494e475f544f5f52454c4541534500604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020546104a39082610d40565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600660205260409020929092556001546104dc92911683610e00565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461057f576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a3a20554e415554484f52495a4544000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166105d15760405162461bcd60e51b81526004018080602001828103825260218152602001806112cc6021913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a249181900360200190a150565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d60208110156106de57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081205491925090610715908390610d40565b905060025442101561072c57600092505050610363565b60045460035461073b91610d40565b4210158061076e575073ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205460ff165b1561077c5791506103639050565b6107a76004546107a161079a60035442610da390919063ffffffff16565b8490610e92565b90610eeb565b92505050610363565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6107d4610f52565b73ffffffffffffffffffffffffffffffffffffffff166107f2610b8a565b73ffffffffffffffffffffffffffffffffffffffff161461085a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6108d1610f52565b73ffffffffffffffffffffffffffffffffffffffff166108ef610b8a565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460ff166109ae576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a204e4f545f5245564f4341424c45000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604090205460ff1615610a29576040805162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b75703a204e4f545f5245564f4341424c45000000000000604482015290519081900360640190fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d6020811015610abc57600080fd5b505190506000610acb83610327565b90506000610ad98383610da3565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559050610b52610b34610b8a565b73ffffffffffffffffffffffffffffffffffffffff86169083610e00565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60066020526000908152604090205481565b60035481565b610bc6610f52565b73ffffffffffffffffffffffffffffffffffffffff16610be4610b8a565b73ffffffffffffffffffffffffffffffffffffffff1614610c4c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610c9e5760405162461bcd60e51b815260040180806020018281038252602681526020018061125f6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60076020526000908152604090205460ff1681565b600082820183811015610d9a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082821115610dfa576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e8d908490610f56565b505050565b600082610ea157506000610d9d565b82820282848281610eae57fe5b0414610d9a5760405162461bcd60e51b81526004018080602001828103825260218152602001806112ab6021913960400191505060405180910390fd5b6000808211610f41576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610f4a57fe5b049392505050565b3390565b6060610fb8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110149092919063ffffffff16565b805190915015610e8d57808060200190516020811015610fd757600080fd5b5051610e8d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806112ed602a913960400191505060405180910390fd5b6060611023848460008561102d565b90505b9392505050565b60608247101561106e5760405162461bcd60e51b81526004018080602001828103825260268152602001806112856026913960400191505060405180910390fd5b611077856111b4565b6110c8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061113257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016110f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611194576040519150601f19603f3d011682016040523d82523d6000602084013e611199565b606091505b50915091506111a98282866111ba565b979650505050505050565b3b151590565b606083156111c9575081611026565b8251156111d95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122357818101518382015260200161120b565b50505050905090810190601f1680156112505780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e4c6f636b75703a3a20494e56414c49445f42454e45464943494152595361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207ac9270eddae13a77ce83c4456dfcaea370e06432c3d7cd903890c016570c4c064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a vesting contract that vests its balance of any ERC20 token to the _beneficiary, gradually in a linear fashion until _start + _duration. By then all of the balance will have vested.",
        "params": {
          "_beneficiary": "address of the beneficiary to whom vested tokens are transferred",
          "_cliffDurationInSeconds": "duration in seconds of the cliff in which tokens will begin to vest",
          "_durationInSeconds": "duration in seconds of the period in which the tokens will vest",
          "_revocable": "whether the vesting is revocable or not",
          "_startTimestamp": "the time (as Unix time) at which point vesting starts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releasableAmount(address)": {
        "details": "Calculates the amount that has already vested but hasn't been released yet.",
        "params": {
          "_token": "ERC20 token which is being vested"
        }
      },
      "release(address)": {
        "params": {
          "_token": "ERC20 token which is being vested"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(address)": {
        "params": {
          "_token": "ERC20 token which is being vested"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vestedAmount(address)": {
        "details": "Calculates the amount that has already vested.",
        "params": {
          "_token": "ERC20 token which is being vested"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "release(address)": {
        "notice": "Transfers vested tokens to beneficiary."
      },
      "revoke(address)": {
        "notice": "Allows the owner to revoke the vesting. Tokens already vested remain in the contract, the rest are returned to the owner."
      }
    },
    "notice": "This was copied from OpenZeppelin's TokenLockup contract to work for solidity version 5.0.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9186,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "beneficiary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9188,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "cliff",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9190,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "start",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9192,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "duration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9194,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "revocable",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 9198,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "released",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9202,
        "contract": "contracts/fatex/TokenLockup.sol:TokenLockup",
        "label": "revoked",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
