{
  "address": "0xB2e2650DFdb7b2DEc4a4455a375ffBfD926cE5FC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xafb4a41aa473d400192fef43473e6b8eb0e0d3c55ef7c7288af9003d4fe65918",
  "receipt": {
    "to": null,
    "from": "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341",
    "contractAddress": "0xB2e2650DFdb7b2DEc4a4455a375ffBfD926cE5FC",
    "transactionIndex": 0,
    "gasUsed": "1948912",
    "logsBloom": "0x
    "blockHash": "0xa68cf01d5102d64cbf7e13747eb12c949afb5d2d9c6deb54f290e5d8efc975e4",
    "transactionHash": "0xafb4a41aa473d400192fef43473e6b8eb0e0d3c55ef7c7288af9003d4fe65918",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16437531,
        "transactionHash": "0xafb4a41aa473d400192fef43473e6b8eb0e0d3c55ef7c7288af9003d4fe65918",
        "address": "0xB2e2650DFdb7b2DEc4a4455a375ffBfD926cE5FC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d45d5d7caf24b4de1eab6431e160891daab28341"
        ],
        "data": "0x000000000000000000000000000000000000000002df458b2c635dcf55e00000",
        "logIndex": 0,
        "blockHash": "0xa68cf01d5102d64cbf7e13747eb12c949afb5d2d9c6deb54f290e5d8efc975e4"
      }
    ],
    "blockNumber": 16437531,
    "cumulativeGasUsed": "1948912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd45d5d7CAF24b4DE1Eab6431E160891DaAb28341",
    "888888888000000000000000000"
  ],
  "solcInputHash": "067b054adfd077c1fce1552f5f448c93",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"constructor\":{\"params\":{\"account_\":\"The initial account to grant all the tokens\",\"totalSupply_\":\"The initial and permanent total supply of the tokens\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"stateVariables\":{\"allowances\":{\"details\":\"Allowance amounts on behalf of others\"},\"balances\":{\"details\":\"Official record of token balances for each account\"}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event that's emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the permit struct used by the contract\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":\"Construct a new Uni token\",\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fatex/FateToken.sol\":\"FateToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/fatex/FateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract FateToken {\\n\\n    /// @notice EIP-20 token name for this token\\n    string public name;\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol;\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply;\\n\\n    /// @dev Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @dev Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event that's emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event that's emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Uni token\\n     * @param account_ The initial account to grant all the tokens\\n     * @param totalSupply_ The initial and permanent total supply of the tokens\\n     */\\n    constructor(\\n        address account_,\\n        uint totalSupply_\\n    ) public {\\n        totalSupply = safe96(totalSupply_, \\\"FateToken::constructor: invalid total supply\\\");\\n        balances[account_] = uint96(totalSupply);\\n        emit Transfer(address(0), account_, totalSupply);\\n\\n        name = \\\"FATExDAO\\\";\\n        symbol = \\\"FATE\\\";\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"FateToken::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"FateToken::permit: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"FateToken::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"FateToken::permit: unauthorized\\\");\\n        require(now <= deadline, \\\"FateToken::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"FateToken::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"FateToken::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"FateToken::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"FateToken::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"FateToken::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"FateToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"FateToken::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"FateToken::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"FateToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"FateToken::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"FateToken::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"FateToken::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"FateToken::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"FateToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xd81012a15285070b197187aef0ba2eccce8e5e4123253c4e4ebb9c8aff1f8d99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200238138038062002381833981016040819052620000349162000216565b62000059816040518060600160405280602c815260200162002355602c913962000136565b6001600160601b031660028181556001600160a01b03841660008181526004602052604080822080546001600160601b0319169095179094559154925190927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91620000c69190620002a6565b60405180910390a360408051808201909152600880825267464154457844414f60c01b6020909201918252620000ff916000916200017a565b50604080518082019091526004808252634641544560e01b60209092019182526200012d916001916200017a565b505050620002af565b6000816c010000000000000000000000008410620001725760405162461bcd60e51b815260040162000169919062000250565b60405180910390fd5b509192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bd57805160ff1916838001178555620001ed565b82800160010185558215620001ed579182015b82811115620001ed578251825591602001919060010190620001d0565b50620001fb929150620001ff565b5090565b5b80821115620001fb576000815560010162000200565b6000806040838503121562000229578182fd5b82516001600160a01b038116811462000240578283fd5b6020939093015192949293505050565b6000602080835283518082850152825b818110156200027e5785810183015185820160400152820162000260565b81811115620002905783604083870101525b50601f01601f1916929092016040019392505050565b90815260200190565b61209680620002bf6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806370a08231116100d8578063b4b5ea571161008c578063dd62ed3e11610066578063dd62ed3e146102f6578063e7a324dc14610309578063f1127ed81461031157610177565b8063b4b5ea57146102bd578063c3cda520146102d0578063d505accf146102e357610177565b80637ecebe00116100bd5780637ecebe001461028f57806395d89b41146102a2578063a9059cbb146102aa57610177565b806370a082311461025c578063782d6fe11461026f57610177565b806330adf81f1161012f578063587cde1e11610114578063587cde1e146102075780635c19a95c146102275780636fcfff451461023c57610177565b806330adf81f146101ea578063313ce567146101f257610177565b806318160ddd1161016057806318160ddd146101ba57806320606b70146101cf57806323b872dd146101d757610177565b806306fdde031461017c578063095ea7b31461019a575b600080fd5b610184610332565b6040516101919190611a58565b60405180910390f35b6101ad6101a8366004611810565b6103c0565b60405161019191906119aa565b6101c261049c565b60405161019191906119b5565b6101c26104a2565b6101ad6101e5366004611764565b6104c6565b6101c2610634565b6101fa610658565b6040516101919190611e43565b61021a610215366004611715565b61065d565b6040516101919190611996565b61023a610235366004611715565b610678565b005b61024f61024a366004611715565b610685565b6040516101919190611e0e565b6101c261026a366004611715565b61069d565b61028261027d366004611810565b6106c6565b6040516101919190611e51565b6101c261029d366004611715565b6108ef565b610184610901565b6101ad6102b8366004611810565b61095b565b6102826102cb366004611715565b610997565b61023a6102de36600461183a565b610a0e565b61023a6102f13660046117a4565b610c08565b6101c2610304366004611730565b610f26565b6101c2610f5f565b61032461031f366004611893565b610f83565b604051610191929190611e1f565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b85780601f1061038d576101008083540402835291602001916103b8565b820191906000526020600020905b81548152906001019060200180831161039b57829003601f168201915b505050505081565b6000806000198314156103d657506000196103fb565b6103f8836040518060600160405280602a8152602001611eca602a9139610fbe565b90505b3360008181526003602090815260408083206001600160a01b03891680855292529182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610488908590611e51565b60405180910390a360019150505b92915050565b60025481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602a80845291936bffffffffffffffffffffffff9091169285926105239288929190611eca90830139610fbe565b9050866001600160a01b0316836001600160a01b03161415801561055557506bffffffffffffffffffffffff82811614155b1561061c57600061057f8383604051806080016040528060428152602001611f2160429139610ff6565b6001600160a01b038981166000818152600360209081526040808320948a16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff86161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610612908590611e51565b60405180910390a3505b61062787878361103f565b5060019695505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6005602052600090815260409020546001600160a01b031681565b6106823382611229565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546bffffffffffffffffffffffff1690565b60004382106106f05760405162461bcd60e51b81526004016106e790611cd1565b60405180910390fd5b6001600160a01b03831660009081526007602052604090205463ffffffff168061071e576000915050610496565b6001600160a01b038416600090815260066020908152604080832063ffffffff6000198601811685529252909120541683106107a0576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff168352929052205464010000000090046bffffffffffffffffffffffff169050610496565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff168310156107db576000915050610496565b600060001982015b8163ffffffff168163ffffffff1611156108a457600282820363ffffffff1604810361080d6116d6565b506001600160a01b038716600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046bffffffffffffffffffffffff16918101919091529087141561087f576020015194506104969350505050565b805163ffffffff168711156108965781935061089d565b6001820392505b50506107e3565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546bffffffffffffffffffffffff6401000000009091041691505092915050565b60086020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b85780601f1061038d576101008083540402835291602001916103b8565b600080610980836040518060600160405280602b8152602001611e9f602b9139610fbe565b905061098d33858361103f565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff16806109c2576000610a07565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610a4091906118d2565b6040518091039020610a506112d0565b30604051602001610a649493929190611a16565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610ab594939291906119f2565b60405160208183030381529060405280519060200120905060008282604051602001610ae2929190611960565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610b1f9493929190611a3a565b6020604051602081039080840390855afa158015610b41573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610b925760405162461bcd60e51b81526004016106e790611b00565b6001600160a01b03811660009081526008602052604090208054600181019091558914610bd15760405162461bcd60e51b81526004016106e790611db1565b87421115610bf15760405162461bcd60e51b81526004016106e790611bba565b610bfb818b611229565b505050505b505050505050565b6000600019861415610c1d5750600019610c42565b610c3f8660405180606001604052806029815260200161200c60299139610fbe565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610c7491906118d2565b6040518091039020610c846112d0565b30604051602001610c989493929190611a16565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206001600160a01b038d166000908152600883529283208054600181019091559094509192610d28927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e91016119be565b60405160208183030381529060405280519060200120905060008282604051602001610d55929190611960565b604051602081830303815290604052805190602001209050600060018289898960405160008152602001604052604051610d929493929190611a3a565b6020604051602081039080840390855afa158015610db4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610e055760405162461bcd60e51b81526004016106e790611c17565b8b6001600160a01b0316816001600160a01b031614610e365760405162461bcd60e51b81526004016106e790611ac9565b88421115610e565760405162461bcd60e51b81526004016106e790611b5d565b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610f109190611e51565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546bffffffffffffffffffffffff1690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046bffffffffffffffffffffffff1682565b6000816c010000000000000000000000008410610fee5760405162461bcd60e51b81526004016106e79190611a58565b509192915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff16111582906110375760405162461bcd60e51b81526004016106e79190611a58565b505050900390565b6001600160a01b0383166110655760405162461bcd60e51b81526004016106e790611d2e565b6001600160a01b03821661108b5760405162461bcd60e51b81526004016106e790611c74565b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603b8084526110db936bffffffffffffffffffffffff9092169285929190611f6390830139610ff6565b6001600160a01b03848116600090815260046020908152604080832080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9687161790559286168252908290205482516060810190935260358084526111609491909116928592909190611fd7908301396112d4565b6001600160a01b038381166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff95909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111ea908590611e51565b60405180910390a36001600160a01b0380841660009081526005602052604080822054858416835291205461122492918216911683611315565b505050565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946bffffffffffffffffffffffff9092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46112ca828483611315565b50505050565b4690565b6000838301826bffffffffffffffffffffffff808716908316101561130c5760405162461bcd60e51b81526004016106e79190611a58565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561134557506000816bffffffffffffffffffffffff16115b15611224576001600160a01b03831615611403576001600160a01b03831660009081526007602052604081205463ffffffff1690816113855760006113ca565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006113f182856040518060600160405280602d8152602001611ef4602d9139610ff6565b90506113ff868484846114b4565b5050505b6001600160a01b03821615611224576001600160a01b03821660009081526007602052604081205463ffffffff16908161143e576000611483565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006114aa82856040518060600160405280602c8152602001612035602c91396112d4565b9050610c00858484845b60006114d843604051806060016040528060398152602001611f9e603991396116ae565b905060008463ffffffff1611801561152157506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611595576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080547fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff166401000000006bffffffffffffffffffffffff851602179055611664565b60408051808201825263ffffffff80841682526bffffffffffffffffffffffff80861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9587167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724848460405161169f929190611e6a565b60405180910390a25050505050565b6000816401000000008410610fee5760405162461bcd60e51b81526004016106e79190611a58565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461049657600080fd5b803560ff8116811461049657600080fd5b600060208284031215611726578081fd5b610a0783836116ed565b60008060408385031215611742578081fd5b61174c84846116ed565b915061175b84602085016116ed565b90509250929050565b600080600060608486031215611778578081fd5b833561178381611e89565b9250602084013561179381611e89565b929592945050506040919091013590565b600080600080600080600060e0888a0312156117be578283fd5b6117c889896116ed565b96506117d78960208a016116ed565b955060408801359450606088013593506117f48960808a01611704565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611822578182fd5b61182c84846116ed565b946020939093013593505050565b60008060008060008060c08789031215611852578182fd5b61185c88886116ed565b955060208701359450604087013593506118798860608901611704565b92506080870135915060a087013590509295509295509295565b600080604083850312156118a5578182fd5b6118af84846116ed565b9150602083013563ffffffff811681146118c7578182fd5b809150509250929050565b60008083546001808216600081146118f1576001811461192657611955565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083168652607f600284041686019350611955565b600283048786526020808720875b8381101561194d5781548a820152908501908201611934565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015611a8457858101830151858201604001528201611a68565b81811115611a955783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252601f908201527f46617465546f6b656e3a3a7065726d69743a20756e617574686f72697a656400604082015260600190565b6020808252602b908201527f46617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201527f64207369676e6174757265000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f46617465546f6b656e3a3a7065726d69743a207369676e61747572652065787060408201527f6972656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f46617465546f6b656e3a3a64656c656761746542795369673a207369676e617460408201527f7572652065787069726564000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f46617465546f6b656e3a3a7065726d69743a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f46617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e7366657220746f20746865207a65726f206164647265737300606082015260800190565b6020808252602c908201527f46617465546f6b656e3a3a6765745072696f72566f7465733a206e6f7420796560408201527f742064657465726d696e65640000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f46617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e736665722066726f6d20746865207a65726f2061646472657360608201527f7300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f46617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201527f64206e6f6e636500000000000000000000000000000000000000000000000000606082015260800190565b63ffffffff91909116815260200190565b63ffffffff9290921682526bffffffffffffffffffffffff16602082015260400190565b60ff91909116815260200190565b6bffffffffffffffffffffffff91909116815260200190565b6bffffffffffffffffffffffff92831681529116602082015260400190565b6001600160a01b038116811461068257600080fdfe46617465546f6b656e3a3a7472616e736665723a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a617070726f76653a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346617465546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f777346617465546f6b656e3a3a7065726d69743a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220b588b19e3e928a6981af5441077ab9a2fd8f2403ef7ba28ebbf84e35de3a5e6364736f6c634300060c003346617465546f6b656e3a3a636f6e7374727563746f723a20696e76616c696420746f74616c20737570706c79",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806370a08231116100d8578063b4b5ea571161008c578063dd62ed3e11610066578063dd62ed3e146102f6578063e7a324dc14610309578063f1127ed81461031157610177565b8063b4b5ea57146102bd578063c3cda520146102d0578063d505accf146102e357610177565b80637ecebe00116100bd5780637ecebe001461028f57806395d89b41146102a2578063a9059cbb146102aa57610177565b806370a082311461025c578063782d6fe11461026f57610177565b806330adf81f1161012f578063587cde1e11610114578063587cde1e146102075780635c19a95c146102275780636fcfff451461023c57610177565b806330adf81f146101ea578063313ce567146101f257610177565b806318160ddd1161016057806318160ddd146101ba57806320606b70146101cf57806323b872dd146101d757610177565b806306fdde031461017c578063095ea7b31461019a575b600080fd5b610184610332565b6040516101919190611a58565b60405180910390f35b6101ad6101a8366004611810565b6103c0565b60405161019191906119aa565b6101c261049c565b60405161019191906119b5565b6101c26104a2565b6101ad6101e5366004611764565b6104c6565b6101c2610634565b6101fa610658565b6040516101919190611e43565b61021a610215366004611715565b61065d565b6040516101919190611996565b61023a610235366004611715565b610678565b005b61024f61024a366004611715565b610685565b6040516101919190611e0e565b6101c261026a366004611715565b61069d565b61028261027d366004611810565b6106c6565b6040516101919190611e51565b6101c261029d366004611715565b6108ef565b610184610901565b6101ad6102b8366004611810565b61095b565b6102826102cb366004611715565b610997565b61023a6102de36600461183a565b610a0e565b61023a6102f13660046117a4565b610c08565b6101c2610304366004611730565b610f26565b6101c2610f5f565b61032461031f366004611893565b610f83565b604051610191929190611e1f565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b85780601f1061038d576101008083540402835291602001916103b8565b820191906000526020600020905b81548152906001019060200180831161039b57829003601f168201915b505050505081565b6000806000198314156103d657506000196103fb565b6103f8836040518060600160405280602a8152602001611eca602a9139610fbe565b90505b3360008181526003602090815260408083206001600160a01b03891680855292529182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610488908590611e51565b60405180910390a360019150505b92915050565b60025481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602a80845291936bffffffffffffffffffffffff9091169285926105239288929190611eca90830139610fbe565b9050866001600160a01b0316836001600160a01b03161415801561055557506bffffffffffffffffffffffff82811614155b1561061c57600061057f8383604051806080016040528060428152602001611f2160429139610ff6565b6001600160a01b038981166000818152600360209081526040808320948a16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff86161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610612908590611e51565b60405180910390a3505b61062787878361103f565b5060019695505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6005602052600090815260409020546001600160a01b031681565b6106823382611229565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546bffffffffffffffffffffffff1690565b60004382106106f05760405162461bcd60e51b81526004016106e790611cd1565b60405180910390fd5b6001600160a01b03831660009081526007602052604090205463ffffffff168061071e576000915050610496565b6001600160a01b038416600090815260066020908152604080832063ffffffff6000198601811685529252909120541683106107a0576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff168352929052205464010000000090046bffffffffffffffffffffffff169050610496565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff168310156107db576000915050610496565b600060001982015b8163ffffffff168163ffffffff1611156108a457600282820363ffffffff1604810361080d6116d6565b506001600160a01b038716600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046bffffffffffffffffffffffff16918101919091529087141561087f576020015194506104969350505050565b805163ffffffff168711156108965781935061089d565b6001820392505b50506107e3565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546bffffffffffffffffffffffff6401000000009091041691505092915050565b60086020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b85780601f1061038d576101008083540402835291602001916103b8565b600080610980836040518060600160405280602b8152602001611e9f602b9139610fbe565b905061098d33858361103f565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff16806109c2576000610a07565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610a4091906118d2565b6040518091039020610a506112d0565b30604051602001610a649493929190611a16565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610ab594939291906119f2565b60405160208183030381529060405280519060200120905060008282604051602001610ae2929190611960565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610b1f9493929190611a3a565b6020604051602081039080840390855afa158015610b41573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610b925760405162461bcd60e51b81526004016106e790611b00565b6001600160a01b03811660009081526008602052604090208054600181019091558914610bd15760405162461bcd60e51b81526004016106e790611db1565b87421115610bf15760405162461bcd60e51b81526004016106e790611bba565b610bfb818b611229565b505050505b505050505050565b6000600019861415610c1d5750600019610c42565b610c3f8660405180606001604052806029815260200161200c60299139610fbe565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610c7491906118d2565b6040518091039020610c846112d0565b30604051602001610c989493929190611a16565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206001600160a01b038d166000908152600883529283208054600181019091559094509192610d28927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e91016119be565b60405160208183030381529060405280519060200120905060008282604051602001610d55929190611960565b604051602081830303815290604052805190602001209050600060018289898960405160008152602001604052604051610d929493929190611a3a565b6020604051602081039080840390855afa158015610db4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116610e055760405162461bcd60e51b81526004016106e790611c17565b8b6001600160a01b0316816001600160a01b031614610e365760405162461bcd60e51b81526004016106e790611ac9565b88421115610e565760405162461bcd60e51b81526004016106e790611b5d565b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610f109190611e51565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546bffffffffffffffffffffffff1690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046bffffffffffffffffffffffff1682565b6000816c010000000000000000000000008410610fee5760405162461bcd60e51b81526004016106e79190611a58565b509192915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff16111582906110375760405162461bcd60e51b81526004016106e79190611a58565b505050900390565b6001600160a01b0383166110655760405162461bcd60e51b81526004016106e790611d2e565b6001600160a01b03821661108b5760405162461bcd60e51b81526004016106e790611c74565b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603b8084526110db936bffffffffffffffffffffffff9092169285929190611f6390830139610ff6565b6001600160a01b03848116600090815260046020908152604080832080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9687161790559286168252908290205482516060810190935260358084526111609491909116928592909190611fd7908301396112d4565b6001600160a01b038381166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff95909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111ea908590611e51565b60405180910390a36001600160a01b0380841660009081526005602052604080822054858416835291205461122492918216911683611315565b505050565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946bffffffffffffffffffffffff9092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46112ca828483611315565b50505050565b4690565b6000838301826bffffffffffffffffffffffff808716908316101561130c5760405162461bcd60e51b81526004016106e79190611a58565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561134557506000816bffffffffffffffffffffffff16115b15611224576001600160a01b03831615611403576001600160a01b03831660009081526007602052604081205463ffffffff1690816113855760006113ca565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006113f182856040518060600160405280602d8152602001611ef4602d9139610ff6565b90506113ff868484846114b4565b5050505b6001600160a01b03821615611224576001600160a01b03821660009081526007602052604081205463ffffffff16908161143e576000611483565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b905060006114aa82856040518060600160405280602c8152602001612035602c91396112d4565b9050610c00858484845b60006114d843604051806060016040528060398152602001611f9e603991396116ae565b905060008463ffffffff1611801561152157506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611595576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080547fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff166401000000006bffffffffffffffffffffffff851602179055611664565b60408051808201825263ffffffff80841682526bffffffffffffffffffffffff80861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9587167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724848460405161169f929190611e6a565b60405180910390a25050505050565b6000816401000000008410610fee5760405162461bcd60e51b81526004016106e79190611a58565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461049657600080fd5b803560ff8116811461049657600080fd5b600060208284031215611726578081fd5b610a0783836116ed565b60008060408385031215611742578081fd5b61174c84846116ed565b915061175b84602085016116ed565b90509250929050565b600080600060608486031215611778578081fd5b833561178381611e89565b9250602084013561179381611e89565b929592945050506040919091013590565b600080600080600080600060e0888a0312156117be578283fd5b6117c889896116ed565b96506117d78960208a016116ed565b955060408801359450606088013593506117f48960808a01611704565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611822578182fd5b61182c84846116ed565b946020939093013593505050565b60008060008060008060c08789031215611852578182fd5b61185c88886116ed565b955060208701359450604087013593506118798860608901611704565b92506080870135915060a087013590509295509295509295565b600080604083850312156118a5578182fd5b6118af84846116ed565b9150602083013563ffffffff811681146118c7578182fd5b809150509250929050565b60008083546001808216600081146118f1576001811461192657611955565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083168652607f600284041686019350611955565b600283048786526020808720875b8381101561194d5781548a820152908501908201611934565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015611a8457858101830151858201604001528201611a68565b81811115611a955783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252601f908201527f46617465546f6b656e3a3a7065726d69743a20756e617574686f72697a656400604082015260600190565b6020808252602b908201527f46617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201527f64207369676e6174757265000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f46617465546f6b656e3a3a7065726d69743a207369676e61747572652065787060408201527f6972656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f46617465546f6b656e3a3a64656c656761746542795369673a207369676e617460408201527f7572652065787069726564000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f46617465546f6b656e3a3a7065726d69743a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f46617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e7366657220746f20746865207a65726f206164647265737300606082015260800190565b6020808252602c908201527f46617465546f6b656e3a3a6765745072696f72566f7465733a206e6f7420796560408201527f742064657465726d696e65640000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f46617465546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e736665722066726f6d20746865207a65726f2061646472657360608201527f7300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f46617465546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201527f64206e6f6e636500000000000000000000000000000000000000000000000000606082015260800190565b63ffffffff91909116815260200190565b63ffffffff9290921682526bffffffffffffffffffffffff16602082015260400190565b60ff91909116815260200190565b6bffffffffffffffffffffffff91909116815260200190565b6bffffffffffffffffffffffff92831681529116602082015260400190565b6001600160a01b038116811461068257600080fdfe46617465546f6b656e3a3a7472616e736665723a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a617070726f76653a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346617465546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546617465546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346617465546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f777346617465546f6b656e3a3a7065726d69743a20616d6f756e742065786365656473203936206269747346617465546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220b588b19e3e928a6981af5441077ab9a2fd8f2403ef7ba28ebbf84e35de3a5e6364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "constructor": {
        "params": {
          "account_": "The initial account to grant all the tokens",
          "totalSupply_": "The initial and permanent total supply of the tokens"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "stateVariables": {
      "allowances": {
        "details": "Allowance amounts on behalf of others"
      },
      "balances": {
        "details": "Official record of token balances for each account"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event that's emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the permit struct used by the contract"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": "Construct a new Uni token",
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6351,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6361,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6368,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 6373,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 6378,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "delegates",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6390,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6383_storage))"
      },
      {
        "astId": 6395,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 6418,
        "contract": "contracts/fatex/FateToken.sol:FateToken",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6383_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct FateToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)6383_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)6383_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FateToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)6383_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)6383_storage": {
        "encoding": "inplace",
        "label": "struct FateToken.Checkpoint",
        "members": [
          {
            "astId": 6380,
            "contract": "contracts/fatex/FateToken.sol:FateToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6382,
            "contract": "contracts/fatex/FateToken.sol:FateToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
